version: '3.8'

services:
  content-intelligence:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: content-intelligence-service
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=production
      - PORT=3005
      - DATABASE_HOST=${DATABASE_HOST:-postgres}
      - DATABASE_PORT=${DATABASE_PORT:-5432}
      - DATABASE_USERNAME=${DATABASE_USERNAME:-postgres}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME:-content_intelligence}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_PROJECT_ID=${GOOGLE_PROJECT_ID}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
    volumes:
      - content-logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - content-intelligence-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3005/health', (res) => { if (res.statusCode === 200) { process.exit(0); } else { process.exit(1); } }).on('error', () => process.exit(1));"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: content-intelligence-postgres
    environment:
      - POSTGRES_DB=${DATABASE_NAME:-content_intelligence}
      - POSTGRES_USER=${DATABASE_USERNAME:-postgres}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - content-intelligence-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME:-postgres} -d ${DATABASE_NAME:-content_intelligence}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: content-intelligence-redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - content-intelligence-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  content-logs:
    driver: local

networks:
  content-intelligence-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16