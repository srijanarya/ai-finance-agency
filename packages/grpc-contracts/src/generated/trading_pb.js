// source: trading.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.treum.trading.AccountType', null, global);
goog.exportSymbol('proto.treum.trading.AssetType', null, global);
goog.exportSymbol('proto.treum.trading.CancelTradeRequest', null, global);
goog.exportSymbol('proto.treum.trading.CreateTradeRequest', null, global);
goog.exportSymbol('proto.treum.trading.CreateTradingAccountRequest', null, global);
goog.exportSymbol('proto.treum.trading.GetPortfolioRequest', null, global);
goog.exportSymbol('proto.treum.trading.GetTradeHistoryRequest', null, global);
goog.exportSymbol('proto.treum.trading.GetTradeRequest', null, global);
goog.exportSymbol('proto.treum.trading.GetTradingAccountRequest', null, global);
goog.exportSymbol('proto.treum.trading.ListTradesRequest', null, global);
goog.exportSymbol('proto.treum.trading.ListTradesResponse', null, global);
goog.exportSymbol('proto.treum.trading.PortfolioResponse', null, global);
goog.exportSymbol('proto.treum.trading.Position', null, global);
goog.exportSymbol('proto.treum.trading.TradeHistoryResponse', null, global);
goog.exportSymbol('proto.treum.trading.TradeResponse', null, global);
goog.exportSymbol('proto.treum.trading.TradeSide', null, global);
goog.exportSymbol('proto.treum.trading.TradeStatus', null, global);
goog.exportSymbol('proto.treum.trading.TradeType', null, global);
goog.exportSymbol('proto.treum.trading.TradingAccountResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treum.trading.CreateTradeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treum.trading.CreateTradeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treum.trading.CreateTradeRequest.displayName = 'proto.treum.trading.CreateTradeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treum.trading.GetTradeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treum.trading.GetTradeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treum.trading.GetTradeRequest.displayName = 'proto.treum.trading.GetTradeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treum.trading.CancelTradeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treum.trading.CancelTradeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treum.trading.CancelTradeRequest.displayName = 'proto.treum.trading.CancelTradeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treum.trading.ListTradesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treum.trading.ListTradesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treum.trading.ListTradesRequest.displayName = 'proto.treum.trading.ListTradesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treum.trading.ListTradesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.treum.trading.ListTradesResponse.repeatedFields_, null);
};
goog.inherits(proto.treum.trading.ListTradesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treum.trading.ListTradesResponse.displayName = 'proto.treum.trading.ListTradesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treum.trading.TradeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treum.trading.TradeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treum.trading.TradeResponse.displayName = 'proto.treum.trading.TradeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treum.trading.CreateTradingAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treum.trading.CreateTradingAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treum.trading.CreateTradingAccountRequest.displayName = 'proto.treum.trading.CreateTradingAccountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treum.trading.GetTradingAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treum.trading.GetTradingAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treum.trading.GetTradingAccountRequest.displayName = 'proto.treum.trading.GetTradingAccountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treum.trading.TradingAccountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treum.trading.TradingAccountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treum.trading.TradingAccountResponse.displayName = 'proto.treum.trading.TradingAccountResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treum.trading.GetPortfolioRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treum.trading.GetPortfolioRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treum.trading.GetPortfolioRequest.displayName = 'proto.treum.trading.GetPortfolioRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treum.trading.PortfolioResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.treum.trading.PortfolioResponse.repeatedFields_, null);
};
goog.inherits(proto.treum.trading.PortfolioResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treum.trading.PortfolioResponse.displayName = 'proto.treum.trading.PortfolioResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treum.trading.Position = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treum.trading.Position, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treum.trading.Position.displayName = 'proto.treum.trading.Position';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treum.trading.GetTradeHistoryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treum.trading.GetTradeHistoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treum.trading.GetTradeHistoryRequest.displayName = 'proto.treum.trading.GetTradeHistoryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treum.trading.TradeHistoryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.treum.trading.TradeHistoryResponse.repeatedFields_, null);
};
goog.inherits(proto.treum.trading.TradeHistoryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treum.trading.TradeHistoryResponse.displayName = 'proto.treum.trading.TradeHistoryResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treum.trading.CreateTradeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.treum.trading.CreateTradeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treum.trading.CreateTradeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.CreateTradeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accountId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 3, ""),
    assetType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    signalId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    type: jspb.Message.getFieldWithDefault(msg, 6, 0),
    side: jspb.Message.getFieldWithDefault(msg, 7, 0),
    quantity: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    price: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    stopLoss: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    takeProfit: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treum.trading.CreateTradeRequest}
 */
proto.treum.trading.CreateTradeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treum.trading.CreateTradeRequest;
  return proto.treum.trading.CreateTradeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treum.trading.CreateTradeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treum.trading.CreateTradeRequest}
 */
proto.treum.trading.CreateTradeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 4:
      var value = /** @type {!proto.treum.trading.AssetType} */ (reader.readEnum());
      msg.setAssetType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignalId(value);
      break;
    case 6:
      var value = /** @type {!proto.treum.trading.TradeType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 7:
      var value = /** @type {!proto.treum.trading.TradeSide} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setQuantity(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStopLoss(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTakeProfit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treum.trading.CreateTradeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treum.trading.CreateTradeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treum.trading.CreateTradeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.CreateTradeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAssetType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getSignalId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getStopLoss();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getTakeProfit();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.treum.trading.CreateTradeRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.CreateTradeRequest} returns this
 */
proto.treum.trading.CreateTradeRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string account_id = 2;
 * @return {string}
 */
proto.treum.trading.CreateTradeRequest.prototype.getAccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.CreateTradeRequest} returns this
 */
proto.treum.trading.CreateTradeRequest.prototype.setAccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string symbol = 3;
 * @return {string}
 */
proto.treum.trading.CreateTradeRequest.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.CreateTradeRequest} returns this
 */
proto.treum.trading.CreateTradeRequest.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional AssetType asset_type = 4;
 * @return {!proto.treum.trading.AssetType}
 */
proto.treum.trading.CreateTradeRequest.prototype.getAssetType = function() {
  return /** @type {!proto.treum.trading.AssetType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.treum.trading.AssetType} value
 * @return {!proto.treum.trading.CreateTradeRequest} returns this
 */
proto.treum.trading.CreateTradeRequest.prototype.setAssetType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string signal_id = 5;
 * @return {string}
 */
proto.treum.trading.CreateTradeRequest.prototype.getSignalId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.CreateTradeRequest} returns this
 */
proto.treum.trading.CreateTradeRequest.prototype.setSignalId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional TradeType type = 6;
 * @return {!proto.treum.trading.TradeType}
 */
proto.treum.trading.CreateTradeRequest.prototype.getType = function() {
  return /** @type {!proto.treum.trading.TradeType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.treum.trading.TradeType} value
 * @return {!proto.treum.trading.CreateTradeRequest} returns this
 */
proto.treum.trading.CreateTradeRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional TradeSide side = 7;
 * @return {!proto.treum.trading.TradeSide}
 */
proto.treum.trading.CreateTradeRequest.prototype.getSide = function() {
  return /** @type {!proto.treum.trading.TradeSide} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.treum.trading.TradeSide} value
 * @return {!proto.treum.trading.CreateTradeRequest} returns this
 */
proto.treum.trading.CreateTradeRequest.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional double quantity = 8;
 * @return {number}
 */
proto.treum.trading.CreateTradeRequest.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.CreateTradeRequest} returns this
 */
proto.treum.trading.CreateTradeRequest.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double price = 9;
 * @return {number}
 */
proto.treum.trading.CreateTradeRequest.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.CreateTradeRequest} returns this
 */
proto.treum.trading.CreateTradeRequest.prototype.setPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double stop_loss = 10;
 * @return {number}
 */
proto.treum.trading.CreateTradeRequest.prototype.getStopLoss = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.CreateTradeRequest} returns this
 */
proto.treum.trading.CreateTradeRequest.prototype.setStopLoss = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double take_profit = 11;
 * @return {number}
 */
proto.treum.trading.CreateTradeRequest.prototype.getTakeProfit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.CreateTradeRequest} returns this
 */
proto.treum.trading.CreateTradeRequest.prototype.setTakeProfit = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treum.trading.GetTradeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.treum.trading.GetTradeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treum.trading.GetTradeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.GetTradeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treum.trading.GetTradeRequest}
 */
proto.treum.trading.GetTradeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treum.trading.GetTradeRequest;
  return proto.treum.trading.GetTradeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treum.trading.GetTradeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treum.trading.GetTradeRequest}
 */
proto.treum.trading.GetTradeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treum.trading.GetTradeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treum.trading.GetTradeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treum.trading.GetTradeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.GetTradeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.treum.trading.GetTradeRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.GetTradeRequest} returns this
 */
proto.treum.trading.GetTradeRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treum.trading.CancelTradeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.treum.trading.CancelTradeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treum.trading.CancelTradeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.CancelTradeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    reason: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treum.trading.CancelTradeRequest}
 */
proto.treum.trading.CancelTradeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treum.trading.CancelTradeRequest;
  return proto.treum.trading.CancelTradeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treum.trading.CancelTradeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treum.trading.CancelTradeRequest}
 */
proto.treum.trading.CancelTradeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treum.trading.CancelTradeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treum.trading.CancelTradeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treum.trading.CancelTradeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.CancelTradeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.treum.trading.CancelTradeRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.CancelTradeRequest} returns this
 */
proto.treum.trading.CancelTradeRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string reason = 2;
 * @return {string}
 */
proto.treum.trading.CancelTradeRequest.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.CancelTradeRequest} returns this
 */
proto.treum.trading.CancelTradeRequest.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treum.trading.ListTradesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.treum.trading.ListTradesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treum.trading.ListTradesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.ListTradesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accountId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    page: jspb.Message.getFieldWithDefault(msg, 3, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 4, 0),
    statusFilter: jspb.Message.getFieldWithDefault(msg, 5, 0),
    assetTypeFilter: jspb.Message.getFieldWithDefault(msg, 6, 0),
    fromDate: (f = msg.getFromDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    toDate: (f = msg.getToDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treum.trading.ListTradesRequest}
 */
proto.treum.trading.ListTradesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treum.trading.ListTradesRequest;
  return proto.treum.trading.ListTradesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treum.trading.ListTradesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treum.trading.ListTradesRequest}
 */
proto.treum.trading.ListTradesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 5:
      var value = /** @type {!proto.treum.trading.TradeStatus} */ (reader.readEnum());
      msg.setStatusFilter(value);
      break;
    case 6:
      var value = /** @type {!proto.treum.trading.AssetType} */ (reader.readEnum());
      msg.setAssetTypeFilter(value);
      break;
    case 7:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFromDate(value);
      break;
    case 8:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setToDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treum.trading.ListTradesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treum.trading.ListTradesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treum.trading.ListTradesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.ListTradesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getStatusFilter();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getAssetTypeFilter();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getFromDate();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getToDate();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.treum.trading.ListTradesRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.ListTradesRequest} returns this
 */
proto.treum.trading.ListTradesRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string account_id = 2;
 * @return {string}
 */
proto.treum.trading.ListTradesRequest.prototype.getAccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.ListTradesRequest} returns this
 */
proto.treum.trading.ListTradesRequest.prototype.setAccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 page = 3;
 * @return {number}
 */
proto.treum.trading.ListTradesRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.ListTradesRequest} returns this
 */
proto.treum.trading.ListTradesRequest.prototype.setPage = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 limit = 4;
 * @return {number}
 */
proto.treum.trading.ListTradesRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.ListTradesRequest} returns this
 */
proto.treum.trading.ListTradesRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional TradeStatus status_filter = 5;
 * @return {!proto.treum.trading.TradeStatus}
 */
proto.treum.trading.ListTradesRequest.prototype.getStatusFilter = function() {
  return /** @type {!proto.treum.trading.TradeStatus} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.treum.trading.TradeStatus} value
 * @return {!proto.treum.trading.ListTradesRequest} returns this
 */
proto.treum.trading.ListTradesRequest.prototype.setStatusFilter = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional AssetType asset_type_filter = 6;
 * @return {!proto.treum.trading.AssetType}
 */
proto.treum.trading.ListTradesRequest.prototype.getAssetTypeFilter = function() {
  return /** @type {!proto.treum.trading.AssetType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.treum.trading.AssetType} value
 * @return {!proto.treum.trading.ListTradesRequest} returns this
 */
proto.treum.trading.ListTradesRequest.prototype.setAssetTypeFilter = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional google.protobuf.Timestamp from_date = 7;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.treum.trading.ListTradesRequest.prototype.getFromDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 7));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.treum.trading.ListTradesRequest} returns this
*/
proto.treum.trading.ListTradesRequest.prototype.setFromDate = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treum.trading.ListTradesRequest} returns this
 */
proto.treum.trading.ListTradesRequest.prototype.clearFromDate = function() {
  return this.setFromDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treum.trading.ListTradesRequest.prototype.hasFromDate = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional google.protobuf.Timestamp to_date = 8;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.treum.trading.ListTradesRequest.prototype.getToDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 8));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.treum.trading.ListTradesRequest} returns this
*/
proto.treum.trading.ListTradesRequest.prototype.setToDate = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treum.trading.ListTradesRequest} returns this
 */
proto.treum.trading.ListTradesRequest.prototype.clearToDate = function() {
  return this.setToDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treum.trading.ListTradesRequest.prototype.hasToDate = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.treum.trading.ListTradesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treum.trading.ListTradesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.treum.trading.ListTradesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treum.trading.ListTradesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.ListTradesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tradesList: jspb.Message.toObjectList(msg.getTradesList(),
    proto.treum.trading.TradeResponse.toObject, includeInstance),
    total: jspb.Message.getFieldWithDefault(msg, 2, 0),
    page: jspb.Message.getFieldWithDefault(msg, 3, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 4, 0),
    totalPages: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treum.trading.ListTradesResponse}
 */
proto.treum.trading.ListTradesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treum.trading.ListTradesResponse;
  return proto.treum.trading.ListTradesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treum.trading.ListTradesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treum.trading.ListTradesResponse}
 */
proto.treum.trading.ListTradesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.treum.trading.TradeResponse;
      reader.readMessage(value,proto.treum.trading.TradeResponse.deserializeBinaryFromReader);
      msg.addTrades(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotal(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalPages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treum.trading.ListTradesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treum.trading.ListTradesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treum.trading.ListTradesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.ListTradesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTradesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.treum.trading.TradeResponse.serializeBinaryToWriter
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTotalPages();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * repeated TradeResponse trades = 1;
 * @return {!Array<!proto.treum.trading.TradeResponse>}
 */
proto.treum.trading.ListTradesResponse.prototype.getTradesList = function() {
  return /** @type{!Array<!proto.treum.trading.TradeResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.treum.trading.TradeResponse, 1));
};


/**
 * @param {!Array<!proto.treum.trading.TradeResponse>} value
 * @return {!proto.treum.trading.ListTradesResponse} returns this
*/
proto.treum.trading.ListTradesResponse.prototype.setTradesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.treum.trading.TradeResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.treum.trading.TradeResponse}
 */
proto.treum.trading.ListTradesResponse.prototype.addTrades = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.treum.trading.TradeResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.treum.trading.ListTradesResponse} returns this
 */
proto.treum.trading.ListTradesResponse.prototype.clearTradesList = function() {
  return this.setTradesList([]);
};


/**
 * optional int32 total = 2;
 * @return {number}
 */
proto.treum.trading.ListTradesResponse.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.ListTradesResponse} returns this
 */
proto.treum.trading.ListTradesResponse.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 page = 3;
 * @return {number}
 */
proto.treum.trading.ListTradesResponse.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.ListTradesResponse} returns this
 */
proto.treum.trading.ListTradesResponse.prototype.setPage = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 limit = 4;
 * @return {number}
 */
proto.treum.trading.ListTradesResponse.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.ListTradesResponse} returns this
 */
proto.treum.trading.ListTradesResponse.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 total_pages = 5;
 * @return {number}
 */
proto.treum.trading.ListTradesResponse.prototype.getTotalPages = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.ListTradesResponse} returns this
 */
proto.treum.trading.ListTradesResponse.prototype.setTotalPages = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treum.trading.TradeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.treum.trading.TradeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treum.trading.TradeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.TradeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    accountId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 4, ""),
    assetType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    signalId: jspb.Message.getFieldWithDefault(msg, 6, ""),
    type: jspb.Message.getFieldWithDefault(msg, 7, 0),
    side: jspb.Message.getFieldWithDefault(msg, 8, 0),
    quantity: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    price: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    stopLoss: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    takeProfit: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    status: jspb.Message.getFieldWithDefault(msg, 13, 0),
    fillPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    commission: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.0),
    pnl: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 0.0),
    executedAt: (f = msg.getExecutedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updatedAt: (f = msg.getUpdatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treum.trading.TradeResponse}
 */
proto.treum.trading.TradeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treum.trading.TradeResponse;
  return proto.treum.trading.TradeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treum.trading.TradeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treum.trading.TradeResponse}
 */
proto.treum.trading.TradeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 5:
      var value = /** @type {!proto.treum.trading.AssetType} */ (reader.readEnum());
      msg.setAssetType(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignalId(value);
      break;
    case 7:
      var value = /** @type {!proto.treum.trading.TradeType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 8:
      var value = /** @type {!proto.treum.trading.TradeSide} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setQuantity(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStopLoss(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTakeProfit(value);
      break;
    case 13:
      var value = /** @type {!proto.treum.trading.TradeStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFillPrice(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCommission(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPnl(value);
      break;
    case 17:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setExecutedAt(value);
      break;
    case 18:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 19:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treum.trading.TradeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treum.trading.TradeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treum.trading.TradeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.TradeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAssetType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getSignalId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getStopLoss();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getTakeProfit();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = message.getFillPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = message.getCommission();
  if (f !== 0.0) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = message.getPnl();
  if (f !== 0.0) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = message.getExecutedAt();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.treum.trading.TradeResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.TradeResponse} returns this
 */
proto.treum.trading.TradeResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.treum.trading.TradeResponse.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.TradeResponse} returns this
 */
proto.treum.trading.TradeResponse.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string account_id = 3;
 * @return {string}
 */
proto.treum.trading.TradeResponse.prototype.getAccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.TradeResponse} returns this
 */
proto.treum.trading.TradeResponse.prototype.setAccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string symbol = 4;
 * @return {string}
 */
proto.treum.trading.TradeResponse.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.TradeResponse} returns this
 */
proto.treum.trading.TradeResponse.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional AssetType asset_type = 5;
 * @return {!proto.treum.trading.AssetType}
 */
proto.treum.trading.TradeResponse.prototype.getAssetType = function() {
  return /** @type {!proto.treum.trading.AssetType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.treum.trading.AssetType} value
 * @return {!proto.treum.trading.TradeResponse} returns this
 */
proto.treum.trading.TradeResponse.prototype.setAssetType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional string signal_id = 6;
 * @return {string}
 */
proto.treum.trading.TradeResponse.prototype.getSignalId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.TradeResponse} returns this
 */
proto.treum.trading.TradeResponse.prototype.setSignalId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional TradeType type = 7;
 * @return {!proto.treum.trading.TradeType}
 */
proto.treum.trading.TradeResponse.prototype.getType = function() {
  return /** @type {!proto.treum.trading.TradeType} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.treum.trading.TradeType} value
 * @return {!proto.treum.trading.TradeResponse} returns this
 */
proto.treum.trading.TradeResponse.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional TradeSide side = 8;
 * @return {!proto.treum.trading.TradeSide}
 */
proto.treum.trading.TradeResponse.prototype.getSide = function() {
  return /** @type {!proto.treum.trading.TradeSide} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.treum.trading.TradeSide} value
 * @return {!proto.treum.trading.TradeResponse} returns this
 */
proto.treum.trading.TradeResponse.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional double quantity = 9;
 * @return {number}
 */
proto.treum.trading.TradeResponse.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.TradeResponse} returns this
 */
proto.treum.trading.TradeResponse.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double price = 10;
 * @return {number}
 */
proto.treum.trading.TradeResponse.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.TradeResponse} returns this
 */
proto.treum.trading.TradeResponse.prototype.setPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double stop_loss = 11;
 * @return {number}
 */
proto.treum.trading.TradeResponse.prototype.getStopLoss = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.TradeResponse} returns this
 */
proto.treum.trading.TradeResponse.prototype.setStopLoss = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional double take_profit = 12;
 * @return {number}
 */
proto.treum.trading.TradeResponse.prototype.getTakeProfit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.TradeResponse} returns this
 */
proto.treum.trading.TradeResponse.prototype.setTakeProfit = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional TradeStatus status = 13;
 * @return {!proto.treum.trading.TradeStatus}
 */
proto.treum.trading.TradeResponse.prototype.getStatus = function() {
  return /** @type {!proto.treum.trading.TradeStatus} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {!proto.treum.trading.TradeStatus} value
 * @return {!proto.treum.trading.TradeResponse} returns this
 */
proto.treum.trading.TradeResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 13, value);
};


/**
 * optional double fill_price = 14;
 * @return {number}
 */
proto.treum.trading.TradeResponse.prototype.getFillPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.TradeResponse} returns this
 */
proto.treum.trading.TradeResponse.prototype.setFillPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional double commission = 15;
 * @return {number}
 */
proto.treum.trading.TradeResponse.prototype.getCommission = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.TradeResponse} returns this
 */
proto.treum.trading.TradeResponse.prototype.setCommission = function(value) {
  return jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional double pnl = 16;
 * @return {number}
 */
proto.treum.trading.TradeResponse.prototype.getPnl = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.TradeResponse} returns this
 */
proto.treum.trading.TradeResponse.prototype.setPnl = function(value) {
  return jspb.Message.setProto3FloatField(this, 16, value);
};


/**
 * optional google.protobuf.Timestamp executed_at = 17;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.treum.trading.TradeResponse.prototype.getExecutedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 17));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.treum.trading.TradeResponse} returns this
*/
proto.treum.trading.TradeResponse.prototype.setExecutedAt = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treum.trading.TradeResponse} returns this
 */
proto.treum.trading.TradeResponse.prototype.clearExecutedAt = function() {
  return this.setExecutedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treum.trading.TradeResponse.prototype.hasExecutedAt = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional google.protobuf.Timestamp created_at = 18;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.treum.trading.TradeResponse.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 18));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.treum.trading.TradeResponse} returns this
*/
proto.treum.trading.TradeResponse.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treum.trading.TradeResponse} returns this
 */
proto.treum.trading.TradeResponse.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treum.trading.TradeResponse.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional google.protobuf.Timestamp updated_at = 19;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.treum.trading.TradeResponse.prototype.getUpdatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 19));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.treum.trading.TradeResponse} returns this
*/
proto.treum.trading.TradeResponse.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treum.trading.TradeResponse} returns this
 */
proto.treum.trading.TradeResponse.prototype.clearUpdatedAt = function() {
  return this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treum.trading.TradeResponse.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 19) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treum.trading.CreateTradingAccountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.treum.trading.CreateTradingAccountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treum.trading.CreateTradingAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.CreateTradingAccountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accountType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    broker: jspb.Message.getFieldWithDefault(msg, 3, ""),
    balance: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    currency: jspb.Message.getFieldWithDefault(msg, 5, ""),
    leverage: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    apiKey: jspb.Message.getFieldWithDefault(msg, 7, ""),
    apiSecret: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treum.trading.CreateTradingAccountRequest}
 */
proto.treum.trading.CreateTradingAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treum.trading.CreateTradingAccountRequest;
  return proto.treum.trading.CreateTradingAccountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treum.trading.CreateTradingAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treum.trading.CreateTradingAccountRequest}
 */
proto.treum.trading.CreateTradingAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.treum.trading.AccountType} */ (reader.readEnum());
      msg.setAccountType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBroker(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBalance(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLeverage(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setApiKey(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setApiSecret(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treum.trading.CreateTradingAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treum.trading.CreateTradingAccountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treum.trading.CreateTradingAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.CreateTradingAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccountType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getBroker();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBalance();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLeverage();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getApiKey();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getApiSecret();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.treum.trading.CreateTradingAccountRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.CreateTradingAccountRequest} returns this
 */
proto.treum.trading.CreateTradingAccountRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AccountType account_type = 2;
 * @return {!proto.treum.trading.AccountType}
 */
proto.treum.trading.CreateTradingAccountRequest.prototype.getAccountType = function() {
  return /** @type {!proto.treum.trading.AccountType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.treum.trading.AccountType} value
 * @return {!proto.treum.trading.CreateTradingAccountRequest} returns this
 */
proto.treum.trading.CreateTradingAccountRequest.prototype.setAccountType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string broker = 3;
 * @return {string}
 */
proto.treum.trading.CreateTradingAccountRequest.prototype.getBroker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.CreateTradingAccountRequest} returns this
 */
proto.treum.trading.CreateTradingAccountRequest.prototype.setBroker = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double balance = 4;
 * @return {number}
 */
proto.treum.trading.CreateTradingAccountRequest.prototype.getBalance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.CreateTradingAccountRequest} returns this
 */
proto.treum.trading.CreateTradingAccountRequest.prototype.setBalance = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional string currency = 5;
 * @return {string}
 */
proto.treum.trading.CreateTradingAccountRequest.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.CreateTradingAccountRequest} returns this
 */
proto.treum.trading.CreateTradingAccountRequest.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional double leverage = 6;
 * @return {number}
 */
proto.treum.trading.CreateTradingAccountRequest.prototype.getLeverage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.CreateTradingAccountRequest} returns this
 */
proto.treum.trading.CreateTradingAccountRequest.prototype.setLeverage = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional string api_key = 7;
 * @return {string}
 */
proto.treum.trading.CreateTradingAccountRequest.prototype.getApiKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.CreateTradingAccountRequest} returns this
 */
proto.treum.trading.CreateTradingAccountRequest.prototype.setApiKey = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string api_secret = 8;
 * @return {string}
 */
proto.treum.trading.CreateTradingAccountRequest.prototype.getApiSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.CreateTradingAccountRequest} returns this
 */
proto.treum.trading.CreateTradingAccountRequest.prototype.setApiSecret = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treum.trading.GetTradingAccountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.treum.trading.GetTradingAccountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treum.trading.GetTradingAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.GetTradingAccountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treum.trading.GetTradingAccountRequest}
 */
proto.treum.trading.GetTradingAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treum.trading.GetTradingAccountRequest;
  return proto.treum.trading.GetTradingAccountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treum.trading.GetTradingAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treum.trading.GetTradingAccountRequest}
 */
proto.treum.trading.GetTradingAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treum.trading.GetTradingAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treum.trading.GetTradingAccountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treum.trading.GetTradingAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.GetTradingAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.treum.trading.GetTradingAccountRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.GetTradingAccountRequest} returns this
 */
proto.treum.trading.GetTradingAccountRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.treum.trading.GetTradingAccountRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.GetTradingAccountRequest} returns this
 */
proto.treum.trading.GetTradingAccountRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treum.trading.TradingAccountResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.treum.trading.TradingAccountResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treum.trading.TradingAccountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.TradingAccountResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    accountType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    broker: jspb.Message.getFieldWithDefault(msg, 4, ""),
    balance: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    currency: jspb.Message.getFieldWithDefault(msg, 6, ""),
    leverage: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    isActive: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updatedAt: (f = msg.getUpdatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treum.trading.TradingAccountResponse}
 */
proto.treum.trading.TradingAccountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treum.trading.TradingAccountResponse;
  return proto.treum.trading.TradingAccountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treum.trading.TradingAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treum.trading.TradingAccountResponse}
 */
proto.treum.trading.TradingAccountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {!proto.treum.trading.AccountType} */ (reader.readEnum());
      msg.setAccountType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBroker(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBalance(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLeverage(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsActive(value);
      break;
    case 9:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 10:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treum.trading.TradingAccountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treum.trading.TradingAccountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treum.trading.TradingAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.TradingAccountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAccountType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getBroker();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBalance();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getLeverage();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getIsActive();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.treum.trading.TradingAccountResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.TradingAccountResponse} returns this
 */
proto.treum.trading.TradingAccountResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.treum.trading.TradingAccountResponse.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.TradingAccountResponse} returns this
 */
proto.treum.trading.TradingAccountResponse.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional AccountType account_type = 3;
 * @return {!proto.treum.trading.AccountType}
 */
proto.treum.trading.TradingAccountResponse.prototype.getAccountType = function() {
  return /** @type {!proto.treum.trading.AccountType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.treum.trading.AccountType} value
 * @return {!proto.treum.trading.TradingAccountResponse} returns this
 */
proto.treum.trading.TradingAccountResponse.prototype.setAccountType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string broker = 4;
 * @return {string}
 */
proto.treum.trading.TradingAccountResponse.prototype.getBroker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.TradingAccountResponse} returns this
 */
proto.treum.trading.TradingAccountResponse.prototype.setBroker = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional double balance = 5;
 * @return {number}
 */
proto.treum.trading.TradingAccountResponse.prototype.getBalance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.TradingAccountResponse} returns this
 */
proto.treum.trading.TradingAccountResponse.prototype.setBalance = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional string currency = 6;
 * @return {string}
 */
proto.treum.trading.TradingAccountResponse.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.TradingAccountResponse} returns this
 */
proto.treum.trading.TradingAccountResponse.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional double leverage = 7;
 * @return {number}
 */
proto.treum.trading.TradingAccountResponse.prototype.getLeverage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.TradingAccountResponse} returns this
 */
proto.treum.trading.TradingAccountResponse.prototype.setLeverage = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional bool is_active = 8;
 * @return {boolean}
 */
proto.treum.trading.TradingAccountResponse.prototype.getIsActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.treum.trading.TradingAccountResponse} returns this
 */
proto.treum.trading.TradingAccountResponse.prototype.setIsActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 9;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.treum.trading.TradingAccountResponse.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 9));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.treum.trading.TradingAccountResponse} returns this
*/
proto.treum.trading.TradingAccountResponse.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treum.trading.TradingAccountResponse} returns this
 */
proto.treum.trading.TradingAccountResponse.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treum.trading.TradingAccountResponse.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional google.protobuf.Timestamp updated_at = 10;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.treum.trading.TradingAccountResponse.prototype.getUpdatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 10));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.treum.trading.TradingAccountResponse} returns this
*/
proto.treum.trading.TradingAccountResponse.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treum.trading.TradingAccountResponse} returns this
 */
proto.treum.trading.TradingAccountResponse.prototype.clearUpdatedAt = function() {
  return this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treum.trading.TradingAccountResponse.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treum.trading.GetPortfolioRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.treum.trading.GetPortfolioRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treum.trading.GetPortfolioRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.GetPortfolioRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accountId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treum.trading.GetPortfolioRequest}
 */
proto.treum.trading.GetPortfolioRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treum.trading.GetPortfolioRequest;
  return proto.treum.trading.GetPortfolioRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treum.trading.GetPortfolioRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treum.trading.GetPortfolioRequest}
 */
proto.treum.trading.GetPortfolioRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treum.trading.GetPortfolioRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treum.trading.GetPortfolioRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treum.trading.GetPortfolioRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.GetPortfolioRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.treum.trading.GetPortfolioRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.GetPortfolioRequest} returns this
 */
proto.treum.trading.GetPortfolioRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string account_id = 2;
 * @return {string}
 */
proto.treum.trading.GetPortfolioRequest.prototype.getAccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.GetPortfolioRequest} returns this
 */
proto.treum.trading.GetPortfolioRequest.prototype.setAccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.treum.trading.PortfolioResponse.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treum.trading.PortfolioResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.treum.trading.PortfolioResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treum.trading.PortfolioResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.PortfolioResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accountId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    totalValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    availableBalance: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    usedMargin: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    unrealizedPnl: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    realizedPnl: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    positionsList: jspb.Message.toObjectList(msg.getPositionsList(),
    proto.treum.trading.Position.toObject, includeInstance),
    lastUpdated: (f = msg.getLastUpdated()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treum.trading.PortfolioResponse}
 */
proto.treum.trading.PortfolioResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treum.trading.PortfolioResponse;
  return proto.treum.trading.PortfolioResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treum.trading.PortfolioResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treum.trading.PortfolioResponse}
 */
proto.treum.trading.PortfolioResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalValue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAvailableBalance(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUsedMargin(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUnrealizedPnl(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRealizedPnl(value);
      break;
    case 8:
      var value = new proto.treum.trading.Position;
      reader.readMessage(value,proto.treum.trading.Position.deserializeBinaryFromReader);
      msg.addPositions(value);
      break;
    case 9:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastUpdated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treum.trading.PortfolioResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treum.trading.PortfolioResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treum.trading.PortfolioResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.PortfolioResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTotalValue();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getAvailableBalance();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getUsedMargin();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getUnrealizedPnl();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getRealizedPnl();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getPositionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.treum.trading.Position.serializeBinaryToWriter
    );
  }
  f = message.getLastUpdated();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.treum.trading.PortfolioResponse.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.PortfolioResponse} returns this
 */
proto.treum.trading.PortfolioResponse.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string account_id = 2;
 * @return {string}
 */
proto.treum.trading.PortfolioResponse.prototype.getAccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.PortfolioResponse} returns this
 */
proto.treum.trading.PortfolioResponse.prototype.setAccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional double total_value = 3;
 * @return {number}
 */
proto.treum.trading.PortfolioResponse.prototype.getTotalValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.PortfolioResponse} returns this
 */
proto.treum.trading.PortfolioResponse.prototype.setTotalValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double available_balance = 4;
 * @return {number}
 */
proto.treum.trading.PortfolioResponse.prototype.getAvailableBalance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.PortfolioResponse} returns this
 */
proto.treum.trading.PortfolioResponse.prototype.setAvailableBalance = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double used_margin = 5;
 * @return {number}
 */
proto.treum.trading.PortfolioResponse.prototype.getUsedMargin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.PortfolioResponse} returns this
 */
proto.treum.trading.PortfolioResponse.prototype.setUsedMargin = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double unrealized_pnl = 6;
 * @return {number}
 */
proto.treum.trading.PortfolioResponse.prototype.getUnrealizedPnl = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.PortfolioResponse} returns this
 */
proto.treum.trading.PortfolioResponse.prototype.setUnrealizedPnl = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double realized_pnl = 7;
 * @return {number}
 */
proto.treum.trading.PortfolioResponse.prototype.getRealizedPnl = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.PortfolioResponse} returns this
 */
proto.treum.trading.PortfolioResponse.prototype.setRealizedPnl = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * repeated Position positions = 8;
 * @return {!Array<!proto.treum.trading.Position>}
 */
proto.treum.trading.PortfolioResponse.prototype.getPositionsList = function() {
  return /** @type{!Array<!proto.treum.trading.Position>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.treum.trading.Position, 8));
};


/**
 * @param {!Array<!proto.treum.trading.Position>} value
 * @return {!proto.treum.trading.PortfolioResponse} returns this
*/
proto.treum.trading.PortfolioResponse.prototype.setPositionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.treum.trading.Position=} opt_value
 * @param {number=} opt_index
 * @return {!proto.treum.trading.Position}
 */
proto.treum.trading.PortfolioResponse.prototype.addPositions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.treum.trading.Position, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.treum.trading.PortfolioResponse} returns this
 */
proto.treum.trading.PortfolioResponse.prototype.clearPositionsList = function() {
  return this.setPositionsList([]);
};


/**
 * optional google.protobuf.Timestamp last_updated = 9;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.treum.trading.PortfolioResponse.prototype.getLastUpdated = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 9));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.treum.trading.PortfolioResponse} returns this
*/
proto.treum.trading.PortfolioResponse.prototype.setLastUpdated = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treum.trading.PortfolioResponse} returns this
 */
proto.treum.trading.PortfolioResponse.prototype.clearLastUpdated = function() {
  return this.setLastUpdated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treum.trading.PortfolioResponse.prototype.hasLastUpdated = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treum.trading.Position.prototype.toObject = function(opt_includeInstance) {
  return proto.treum.trading.Position.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treum.trading.Position} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.Position.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    assetType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    quantity: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    averagePrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    currentPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    marketValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    unrealizedPnl: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    unrealizedPnlPercent: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    side: jspb.Message.getFieldWithDefault(msg, 9, 0),
    openedAt: (f = msg.getOpenedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treum.trading.Position}
 */
proto.treum.trading.Position.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treum.trading.Position;
  return proto.treum.trading.Position.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treum.trading.Position} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treum.trading.Position}
 */
proto.treum.trading.Position.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 2:
      var value = /** @type {!proto.treum.trading.AssetType} */ (reader.readEnum());
      msg.setAssetType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setQuantity(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAveragePrice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrentPrice(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMarketValue(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUnrealizedPnl(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUnrealizedPnlPercent(value);
      break;
    case 9:
      var value = /** @type {!proto.treum.trading.TradeSide} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 10:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setOpenedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treum.trading.Position.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treum.trading.Position.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treum.trading.Position} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.Position.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAssetType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getAveragePrice();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getCurrentPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getMarketValue();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getUnrealizedPnl();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getUnrealizedPnlPercent();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getOpenedAt();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.treum.trading.Position.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.Position} returns this
 */
proto.treum.trading.Position.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AssetType asset_type = 2;
 * @return {!proto.treum.trading.AssetType}
 */
proto.treum.trading.Position.prototype.getAssetType = function() {
  return /** @type {!proto.treum.trading.AssetType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.treum.trading.AssetType} value
 * @return {!proto.treum.trading.Position} returns this
 */
proto.treum.trading.Position.prototype.setAssetType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional double quantity = 3;
 * @return {number}
 */
proto.treum.trading.Position.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.Position} returns this
 */
proto.treum.trading.Position.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double average_price = 4;
 * @return {number}
 */
proto.treum.trading.Position.prototype.getAveragePrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.Position} returns this
 */
proto.treum.trading.Position.prototype.setAveragePrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double current_price = 5;
 * @return {number}
 */
proto.treum.trading.Position.prototype.getCurrentPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.Position} returns this
 */
proto.treum.trading.Position.prototype.setCurrentPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double market_value = 6;
 * @return {number}
 */
proto.treum.trading.Position.prototype.getMarketValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.Position} returns this
 */
proto.treum.trading.Position.prototype.setMarketValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double unrealized_pnl = 7;
 * @return {number}
 */
proto.treum.trading.Position.prototype.getUnrealizedPnl = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.Position} returns this
 */
proto.treum.trading.Position.prototype.setUnrealizedPnl = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double unrealized_pnl_percent = 8;
 * @return {number}
 */
proto.treum.trading.Position.prototype.getUnrealizedPnlPercent = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.Position} returns this
 */
proto.treum.trading.Position.prototype.setUnrealizedPnlPercent = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional TradeSide side = 9;
 * @return {!proto.treum.trading.TradeSide}
 */
proto.treum.trading.Position.prototype.getSide = function() {
  return /** @type {!proto.treum.trading.TradeSide} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.treum.trading.TradeSide} value
 * @return {!proto.treum.trading.Position} returns this
 */
proto.treum.trading.Position.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional google.protobuf.Timestamp opened_at = 10;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.treum.trading.Position.prototype.getOpenedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 10));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.treum.trading.Position} returns this
*/
proto.treum.trading.Position.prototype.setOpenedAt = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treum.trading.Position} returns this
 */
proto.treum.trading.Position.prototype.clearOpenedAt = function() {
  return this.setOpenedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treum.trading.Position.prototype.hasOpenedAt = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treum.trading.GetTradeHistoryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.treum.trading.GetTradeHistoryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treum.trading.GetTradeHistoryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.GetTradeHistoryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accountId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    page: jspb.Message.getFieldWithDefault(msg, 3, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 4, 0),
    fromDate: (f = msg.getFromDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    toDate: (f = msg.getToDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treum.trading.GetTradeHistoryRequest}
 */
proto.treum.trading.GetTradeHistoryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treum.trading.GetTradeHistoryRequest;
  return proto.treum.trading.GetTradeHistoryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treum.trading.GetTradeHistoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treum.trading.GetTradeHistoryRequest}
 */
proto.treum.trading.GetTradeHistoryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFromDate(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setToDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treum.trading.GetTradeHistoryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treum.trading.GetTradeHistoryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treum.trading.GetTradeHistoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.GetTradeHistoryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getFromDate();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getToDate();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.treum.trading.GetTradeHistoryRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.GetTradeHistoryRequest} returns this
 */
proto.treum.trading.GetTradeHistoryRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string account_id = 2;
 * @return {string}
 */
proto.treum.trading.GetTradeHistoryRequest.prototype.getAccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.treum.trading.GetTradeHistoryRequest} returns this
 */
proto.treum.trading.GetTradeHistoryRequest.prototype.setAccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 page = 3;
 * @return {number}
 */
proto.treum.trading.GetTradeHistoryRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.GetTradeHistoryRequest} returns this
 */
proto.treum.trading.GetTradeHistoryRequest.prototype.setPage = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 limit = 4;
 * @return {number}
 */
proto.treum.trading.GetTradeHistoryRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.GetTradeHistoryRequest} returns this
 */
proto.treum.trading.GetTradeHistoryRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp from_date = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.treum.trading.GetTradeHistoryRequest.prototype.getFromDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.treum.trading.GetTradeHistoryRequest} returns this
*/
proto.treum.trading.GetTradeHistoryRequest.prototype.setFromDate = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treum.trading.GetTradeHistoryRequest} returns this
 */
proto.treum.trading.GetTradeHistoryRequest.prototype.clearFromDate = function() {
  return this.setFromDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treum.trading.GetTradeHistoryRequest.prototype.hasFromDate = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional google.protobuf.Timestamp to_date = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.treum.trading.GetTradeHistoryRequest.prototype.getToDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.treum.trading.GetTradeHistoryRequest} returns this
*/
proto.treum.trading.GetTradeHistoryRequest.prototype.setToDate = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treum.trading.GetTradeHistoryRequest} returns this
 */
proto.treum.trading.GetTradeHistoryRequest.prototype.clearToDate = function() {
  return this.setToDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treum.trading.GetTradeHistoryRequest.prototype.hasToDate = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.treum.trading.TradeHistoryResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treum.trading.TradeHistoryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.treum.trading.TradeHistoryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treum.trading.TradeHistoryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.TradeHistoryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tradesList: jspb.Message.toObjectList(msg.getTradesList(),
    proto.treum.trading.TradeResponse.toObject, includeInstance),
    total: jspb.Message.getFieldWithDefault(msg, 2, 0),
    page: jspb.Message.getFieldWithDefault(msg, 3, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 4, 0),
    totalPnl: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    totalCommission: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    winningTrades: jspb.Message.getFieldWithDefault(msg, 7, 0),
    losingTrades: jspb.Message.getFieldWithDefault(msg, 8, 0),
    winRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treum.trading.TradeHistoryResponse}
 */
proto.treum.trading.TradeHistoryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treum.trading.TradeHistoryResponse;
  return proto.treum.trading.TradeHistoryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treum.trading.TradeHistoryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treum.trading.TradeHistoryResponse}
 */
proto.treum.trading.TradeHistoryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.treum.trading.TradeResponse;
      reader.readMessage(value,proto.treum.trading.TradeResponse.deserializeBinaryFromReader);
      msg.addTrades(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotal(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalPnl(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalCommission(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWinningTrades(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLosingTrades(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWinRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treum.trading.TradeHistoryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treum.trading.TradeHistoryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treum.trading.TradeHistoryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treum.trading.TradeHistoryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTradesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.treum.trading.TradeResponse.serializeBinaryToWriter
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTotalPnl();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getTotalCommission();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getWinningTrades();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getLosingTrades();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getWinRate();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
};


/**
 * repeated TradeResponse trades = 1;
 * @return {!Array<!proto.treum.trading.TradeResponse>}
 */
proto.treum.trading.TradeHistoryResponse.prototype.getTradesList = function() {
  return /** @type{!Array<!proto.treum.trading.TradeResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.treum.trading.TradeResponse, 1));
};


/**
 * @param {!Array<!proto.treum.trading.TradeResponse>} value
 * @return {!proto.treum.trading.TradeHistoryResponse} returns this
*/
proto.treum.trading.TradeHistoryResponse.prototype.setTradesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.treum.trading.TradeResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.treum.trading.TradeResponse}
 */
proto.treum.trading.TradeHistoryResponse.prototype.addTrades = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.treum.trading.TradeResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.treum.trading.TradeHistoryResponse} returns this
 */
proto.treum.trading.TradeHistoryResponse.prototype.clearTradesList = function() {
  return this.setTradesList([]);
};


/**
 * optional int32 total = 2;
 * @return {number}
 */
proto.treum.trading.TradeHistoryResponse.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.TradeHistoryResponse} returns this
 */
proto.treum.trading.TradeHistoryResponse.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 page = 3;
 * @return {number}
 */
proto.treum.trading.TradeHistoryResponse.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.TradeHistoryResponse} returns this
 */
proto.treum.trading.TradeHistoryResponse.prototype.setPage = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 limit = 4;
 * @return {number}
 */
proto.treum.trading.TradeHistoryResponse.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.TradeHistoryResponse} returns this
 */
proto.treum.trading.TradeHistoryResponse.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional double total_pnl = 5;
 * @return {number}
 */
proto.treum.trading.TradeHistoryResponse.prototype.getTotalPnl = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.TradeHistoryResponse} returns this
 */
proto.treum.trading.TradeHistoryResponse.prototype.setTotalPnl = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double total_commission = 6;
 * @return {number}
 */
proto.treum.trading.TradeHistoryResponse.prototype.getTotalCommission = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.TradeHistoryResponse} returns this
 */
proto.treum.trading.TradeHistoryResponse.prototype.setTotalCommission = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional int32 winning_trades = 7;
 * @return {number}
 */
proto.treum.trading.TradeHistoryResponse.prototype.getWinningTrades = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.TradeHistoryResponse} returns this
 */
proto.treum.trading.TradeHistoryResponse.prototype.setWinningTrades = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 losing_trades = 8;
 * @return {number}
 */
proto.treum.trading.TradeHistoryResponse.prototype.getLosingTrades = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.TradeHistoryResponse} returns this
 */
proto.treum.trading.TradeHistoryResponse.prototype.setLosingTrades = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional double win_rate = 9;
 * @return {number}
 */
proto.treum.trading.TradeHistoryResponse.prototype.getWinRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.treum.trading.TradeHistoryResponse} returns this
 */
proto.treum.trading.TradeHistoryResponse.prototype.setWinRate = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * @enum {number}
 */
proto.treum.trading.AssetType = {
  ASSET_TYPE_UNSPECIFIED: 0,
  ASSET_TYPE_STOCK: 1,
  ASSET_TYPE_CRYPTO: 2,
  ASSET_TYPE_FOREX: 3,
  ASSET_TYPE_COMMODITY: 4,
  ASSET_TYPE_INDEX: 5,
  ASSET_TYPE_BOND: 6
};

/**
 * @enum {number}
 */
proto.treum.trading.TradeType = {
  TRADE_TYPE_UNSPECIFIED: 0,
  TRADE_TYPE_MARKET: 1,
  TRADE_TYPE_LIMIT: 2,
  TRADE_TYPE_STOP: 3,
  TRADE_TYPE_STOP_LIMIT: 4
};

/**
 * @enum {number}
 */
proto.treum.trading.TradeSide = {
  TRADE_SIDE_UNSPECIFIED: 0,
  TRADE_SIDE_BUY: 1,
  TRADE_SIDE_SELL: 2
};

/**
 * @enum {number}
 */
proto.treum.trading.TradeStatus = {
  TRADE_STATUS_UNSPECIFIED: 0,
  TRADE_STATUS_PENDING: 1,
  TRADE_STATUS_FILLED: 2,
  TRADE_STATUS_PARTIALLY_FILLED: 3,
  TRADE_STATUS_CANCELLED: 4,
  TRADE_STATUS_REJECTED: 5
};

/**
 * @enum {number}
 */
proto.treum.trading.AccountType = {
  ACCOUNT_TYPE_UNSPECIFIED: 0,
  ACCOUNT_TYPE_DEMO: 1,
  ACCOUNT_TYPE_LIVE: 2
};

goog.object.extend(exports, proto.treum.trading);
