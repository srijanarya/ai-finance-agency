version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai_finance_postgres
    environment:
      POSTGRES_DB: ai_finance_db
      POSTGRES_USER: ai_finance_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-securepassword123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_finance_user -d ai_finance_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai_finance_redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # FastAPI Application
  api:
    build: .
    container_name: ai_finance_api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - APP_ENV=development
      - DATABASE_URL=postgresql://ai_finance_user:${POSTGRES_PASSWORD:-securepassword123}@postgres:5432/ai_finance_db
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - JWT_SECRET=${JWT_SECRET:-dev-secret-change-in-production}
      - SESSION_SECRET=${SESSION_SECRET:-dev-session-secret}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-dev-encryption-key}
    volumes:
      - ./app:/app/app:ro
      - ./migrations:/app/migrations:ro
      - ./logs:/app/logs
      - ./data:/app/data
    ports:
      - "8000:8000"
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Migration Service
  migrations:
    build: .
    container_name: ai_finance_migrations
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://ai_finance_user:${POSTGRES_PASSWORD:-securepassword123}@postgres:5432/ai_finance_db
    volumes:
      - ./migrations:/app/migrations
      - ./alembic.ini:/app/alembic.ini
      - ./app:/app/app:ro
    command: alembic upgrade head
    restart: "no"

  # Celery Worker
  worker:
    build: .
    container_name: ai_finance_worker
    depends_on:
      - redis
      - postgres
      - api
    environment:
      - APP_ENV=development
      - DATABASE_URL=postgresql://ai_finance_user:${POSTGRES_PASSWORD:-securepassword123}@postgres:5432/ai_finance_db
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    volumes:
      - ./app:/app/app:ro
      - ./logs:/app/logs
    command: celery -A app.core.celery worker --loglevel=info --concurrency=2
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "app.core.celery", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Beat (Scheduler)
  scheduler:
    build: .
    container_name: ai_finance_scheduler
    depends_on:
      - redis
      - postgres
    environment:
      - APP_ENV=development
      - DATABASE_URL=postgresql://ai_finance_user:${POSTGRES_PASSWORD:-securepassword123}@postgres:5432/ai_finance_db
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    volumes:
      - ./app:/app/app:ro
      - ./logs:/app/logs
    command: celery -A app.core.celery beat --loglevel=info
    restart: unless-stopped

  # Nginx Reverse Proxy (optional for production)
  nginx:
    image: nginx:alpine
    container_name: ai_finance_nginx
    depends_on:
      - api
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
    restart: unless-stopped
    profiles:
      - production

  # Monitoring Stack (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai_finance_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: ai_finance_grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: ai_finance_network
    driver: bridge