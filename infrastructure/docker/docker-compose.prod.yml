# Docker Compose for AI Finance Agency - Production Environment
# Optimized for production deployment with high availability

version: '3.8'

services:
  # Main Application - Multiple Replicas for High Availability
  app:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile
      target: runtime
    image: ai-finance-agency:${VERSION:-latest}
    restart: unless-stopped
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    environment:
      - APP_ENV=production
      - DEBUG=false
      - VALIDATE_ENV=true
      - HEALTH_MONITOR=true
      - RUN_MIGRATIONS=false
      - CREATE_INITIAL_DATA=false
      - WORKERS=4
    env_file:
      - ../../.env.production
    volumes:
      - app_logs:/app/logs
      - app_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai-finance-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # PostgreSQL Database with Optimizations
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - ai-finance-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Redis with Persistence and Clustering
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 400mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 300
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - ai-finance-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Nginx Load Balancer with SSL
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ../nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - static_files:/var/www/static:ro
    depends_on:
      - app
    networks:
      - ai-finance-net
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Celery Workers - Scaled for Production Load
  celery-worker:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile
      target: runtime
    image: ai-finance-agency:${VERSION:-latest}
    restart: unless-stopped
    deploy:
      replicas: 4
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    command: >
      celery -A main.celery worker
      --loglevel=info
      --concurrency=4
      --max-tasks-per-child=1000
      --time-limit=300
      --soft-time-limit=240
    environment:
      - APP_ENV=production
      - C_FORCE_ROOT=1
    env_file:
      - ../../.env.production
    volumes:
      - app_logs:/app/logs
      - app_data:/app/data
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - ai-finance-net
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Celery Beat Scheduler - Single Instance
  celery-beat:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile
      target: runtime
    image: ai-finance-agency:${VERSION:-latest}
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.125'
    command: >
      celery -A main.celery beat
      --loglevel=info
      --pidfile=/tmp/celerybeat.pid
    environment:
      - APP_ENV=production
      - C_FORCE_ROOT=1
    env_file:
      - ../../.env.production
    volumes:
      - app_logs:/app/logs
      - app_data:/app/data
      - celery_data:/app/celerybeat-schedule
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - ai-finance-net
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
    networks:
      - ai-finance-net
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Grafana Visualization with Authentication
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL}
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SESSION_COOKIE_SECURE=true
      - GF_SESSION_COOKIE_SAMESITE=strict
      - GF_LOG_LEVEL=warn
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ../monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - ai-finance-net
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Log Aggregation with Loki
  loki:
    image: grafana/loki:latest
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    volumes:
      - ../monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - ai-finance-net
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Backup Service for Data Protection
  backup:
    image: ai-finance-agency:${VERSION:-latest}
    restart: "no"
    deploy:
      replicas: 0
    command: python scripts/backup_service.py
    environment:
      - APP_ENV=production
      - BACKUP_SCHEDULE=daily
      - BACKUP_RETENTION=30
    env_file:
      - ../../.env.production
    volumes:
      - app_data:/app/data:ro
      - postgres_data:/backup/postgres:ro
      - backup_storage:/backup/output
    depends_on:
      - postgres
    networks:
      - ai-finance-net

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ai-finance/data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ai-finance/data/redis
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ai-finance/logs
  app_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ai-finance/data/app
  celery_data:
    driver: local
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ai-finance/data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ai-finance/data/grafana
  loki_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ai-finance/data/loki
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ai-finance/logs/nginx
  static_files:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ai-finance/static
  backup_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ai-finance/backup

networks:
  ai-finance-net:
    driver: overlay
    attachable: true
    ipam:
      config:
        - subnet: 10.0.1.0/24