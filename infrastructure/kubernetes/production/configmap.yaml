apiVersion: v1
kind: ConfigMap
metadata:
  name: treum-config
  namespace: treum-production
data:
  # Application Configuration
  APP_NAME: "TREUM AI Finance Agency"
  ENVIRONMENT: "production"
  API_VERSION: "v1"
  
  # Server Configuration
  HOST: "0.0.0.0"
  PORT: "8000"
  WORKERS: "4"
  
  # Database Configuration (Non-sensitive)
  DATABASE_HOST: "postgres-service.treum-production.svc.cluster.local"
  DATABASE_PORT: "5432"
  DATABASE_NAME: "treum_production"
  DATABASE_POOL_SIZE: "20"
  DATABASE_MAX_OVERFLOW: "40"
  
  # Redis Configuration
  REDIS_HOST: "redis-service.treum-production.svc.cluster.local"
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  REDIS_POOL_SIZE: "10"
  
  # Kafka Configuration
  KAFKA_BOOTSTRAP_SERVERS: "kafka-service.treum-production.svc.cluster.local:9092"
  KAFKA_CONSUMER_GROUP: "treum-signals-consumer"
  
  # AI Configuration
  AI_MODELS_ENABLED: "gpt4,claude3,custom_lstm,ensemble"
  AI_CONFIDENCE_THRESHOLD: "0.7"
  AI_ENSEMBLE_VOTING: "weighted"
  
  # Trading Configuration
  TRADING_HOURS_START: "09:15"
  TRADING_HOURS_END: "15:30"
  MARKET_TIMEZONE: "Asia/Kolkata"
  DEFAULT_SLIPPAGE: "0.002"
  
  # Rate Limiting
  RATE_LIMIT_PER_MINUTE: "60"
  RATE_LIMIT_PER_HOUR: "1000"
  
  # Monitoring
  PROMETHEUS_ENABLED: "true"
  PROMETHEUS_PORT: "9090"
  JAEGER_ENABLED: "true"
  JAEGER_AGENT_HOST: "jaeger-agent.treum-production.svc.cluster.local"
  JAEGER_AGENT_PORT: "6831"
  
  # Logging
  LOG_LEVEL: "INFO"
  LOG_FORMAT: "json"
  LOG_OUTPUT: "stdout"
  
  # CORS Configuration
  CORS_ORIGINS: "https://app.treum.ai,https://www.treum.ai"
  CORS_ALLOW_CREDENTIALS: "true"
  
  # Feature Flags
  FEATURE_AI_SIGNALS: "true"
  FEATURE_BACKTESTING: "true"
  FEATURE_PORTFOLIO_MANAGEMENT: "true"
  FEATURE_SOCIAL_TRADING: "false"
  FEATURE_CRYPTO_TRADING: "false"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: treum-production
data:
  nginx.conf: |
    upstream backend {
        least_conn;
        server treum-api-service:8000 max_fails=3 fail_timeout=30s;
    }
    
    server {
        listen 80;
        server_name app.treum.ai;
        
        # Redirect to HTTPS
        return 301 https://$server_name$request_uri;
    }
    
    server {
        listen 443 ssl http2;
        server_name app.treum.ai;
        
        # SSL Configuration (cert-manager will handle certificates)
        ssl_certificate /etc/nginx/ssl/tls.crt;
        ssl_certificate_key /etc/nginx/ssl/tls.key;
        
        # Security Headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # Rate Limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req zone=api burst=20 nodelay;
        
        # Compression
        gzip on;
        gzip_types text/plain application/json application/javascript text/css;
        
        # API Routes
        location /api/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # WebSocket Support
        location /ws/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket timeouts
            proxy_read_timeout 86400s;
            proxy_send_timeout 86400s;
        }
        
        # Health Check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Metrics endpoint (internal only)
        location /metrics {
            allow 10.0.0.0/8;
            deny all;
            proxy_pass http://backend/metrics;
        }
    }