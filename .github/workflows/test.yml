name: 🧪 Test Suite

on:
  workflow_call:
    inputs:
      services:
        description: 'Services to test (comma-separated)'
        required: false
        type: string
        default: 'all'
      test_type:
        description: 'Type of tests to run'
        required: false
        type: string
        default: 'all'
      coverage_threshold:
        description: 'Minimum coverage threshold'
        required: false
        type: number
        default: 80
  workflow_dispatch:
    inputs:
      services:
        description: 'Services to test (comma-separated)'
        required: false
        type: string
        default: 'all'
      test_type:
        description: 'Type of tests to run'
        required: false
        type: choice
        options: ['all', 'unit', 'integration', 'e2e']
        default: 'all'

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  COVERAGE_THRESHOLD: ${{ inputs.coverage_threshold || 80 }}

jobs:
  # =============================================================================
  # TEST MATRIX PREPARATION
  # =============================================================================
  prepare-test-matrix:
    name: 🔍 Prepare Test Matrix
    runs-on: ubuntu-latest
    outputs:
      node_services: ${{ steps.matrix.outputs.node_services }}
      python_services: ${{ steps.matrix.outputs.python_services }}
      test_databases: ${{ steps.matrix.outputs.test_databases }}
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Detect Service Technologies
        id: matrix
        run: |
          NODE_SERVICES=()
          PYTHON_SERVICES=()
          
          # Detect Node.js services
          for service in services/*/; do
            if [[ -f "$service/package.json" ]]; then
              service_name=$(basename "$service")
              NODE_SERVICES+=("$service_name")
            fi
          done
          
          # Detect Python services  
          for service in services/*/; do
            if [[ -f "$service/requirements.txt" ]] || [[ -f "$service/pyproject.toml" ]]; then
              service_name=$(basename "$service")
              PYTHON_SERVICES+=("$service_name")
            fi
          done
          
          # Convert arrays to JSON
          NODE_JSON=$(printf '%s\n' "${NODE_SERVICES[@]}" | jq -R . | jq -s .)
          PYTHON_JSON=$(printf '%s\n' "${PYTHON_SERVICES[@]}" | jq -R . | jq -s .)
          
          echo "node_services=${NODE_JSON}" >> $GITHUB_OUTPUT
          echo "python_services=${PYTHON_JSON}" >> $GITHUB_OUTPUT
          echo "test_databases=[\"postgres\", \"redis\", \"mongodb\"]" >> $GITHUB_OUTPUT
          
          echo "📊 Node.js services: ${NODE_SERVICES[*]}"
          echo "📊 Python services: ${PYTHON_SERVICES[*]}"

  # =============================================================================
  # UNIT TESTS - NODE.JS SERVICES
  # =============================================================================
  test-node-unit:
    name: 🧪 Unit Tests (Node.js)
    runs-on: ubuntu-latest
    needs: prepare-test-matrix
    if: fromJson(needs.prepare-test-matrix.outputs.node_services)[0] != null
    
    strategy:
      matrix:
        service: ${{ fromJson(needs.prepare-test-matrix.outputs.node_services) }}
        node-version: ['18', '20', '22']
      fail-fast: false
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci
          if [[ -f "services/${{ matrix.service }}/package.json" ]]; then
            cd services/${{ matrix.service }}
            npm ci
          fi

      - name: 🔍 Check Test Files
        id: check-tests
        run: |
          if [[ -d "services/${{ matrix.service }}/tests" ]] || [[ -d "services/${{ matrix.service }}/test" ]] || [[ -d "services/${{ matrix.service }}/__tests__" ]]; then
            echo "has_tests=true" >> $GITHUB_OUTPUT
          else
            echo "has_tests=false" >> $GITHUB_OUTPUT
          fi

      - name: 🧪 Run Unit Tests
        if: steps.check-tests.outputs.has_tests == 'true'
        run: |
          cd services/${{ matrix.service }}
          npm run test:unit || npm run test -- --testPathPattern=unit

      - name: 📊 Generate Coverage Report
        if: steps.check-tests.outputs.has_tests == 'true' && matrix.node-version == '20'
        run: |
          cd services/${{ matrix.service }}
          npm run test:coverage || npm run test -- --coverage

      - name: 📤 Upload Coverage
        if: steps.check-tests.outputs.has_tests == 'true' && matrix.node-version == '20'
        uses: codecov/codecov-action@v3
        with:
          file: services/${{ matrix.service }}/coverage/lcov.info
          flags: unit,${{ matrix.service }}
          name: ${{ matrix.service }}-unit
          fail_ci_if_error: false

  # =============================================================================
  # UNIT TESTS - PYTHON SERVICES  
  # =============================================================================
  test-python-unit:
    name: 🧪 Unit Tests (Python)
    runs-on: ubuntu-latest
    needs: prepare-test-matrix
    if: fromJson(needs.prepare-test-matrix.outputs.python_services)[0] != null
    
    strategy:
      matrix:
        service: ${{ fromJson(needs.prepare-test-matrix.outputs.python_services) }}
        python-version: ['3.10', '3.11', '3.12']
      fail-fast: false
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          if [[ -f "services/${{ matrix.service }}/requirements.txt" ]]; then
            pip install -r services/${{ matrix.service }}/requirements.txt
          fi
          if [[ -f "services/${{ matrix.service }}/requirements-test.txt" ]]; then
            pip install -r services/${{ matrix.service }}/requirements-test.txt
          fi
          pip install pytest pytest-cov pytest-mock

      - name: 🧪 Run Unit Tests
        run: |
          cd services/${{ matrix.service }}
          python -m pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html

      - name: 📤 Upload Coverage
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: services/${{ matrix.service }}/coverage.xml
          flags: unit,${{ matrix.service }}
          name: ${{ matrix.service }}-unit-python

  # =============================================================================
  # INTEGRATION TESTS
  # =============================================================================
  test-integration:
    name: 🧪 Integration Tests
    runs-on: ubuntu-latest
    needs: prepare-test-matrix
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: test_user
          MONGO_INITDB_ROOT_PASSWORD: test_password
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
    
    strategy:
      matrix:
        service: [
          'api-gateway',
          'user-management',
          'payment',
          'signals',
          'trading',
          'market-data',
          'education',
          'risk-management',
          'notification',
          'content-intelligence'
        ]
      fail-fast: false
      
    env:
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
      REDIS_URL: redis://localhost:6379
      MONGODB_URL: mongodb://test_user:test_password@localhost:27017/test_db?authSource=admin
      NODE_ENV: test
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci
          cd services/${{ matrix.service }}
          npm ci

      - name: 🗄️ Setup Test Database
        run: |
          # Run database migrations for testing
          if [[ -f "services/${{ matrix.service }}/migrations" ]]; then
            cd services/${{ matrix.service }}
            npm run db:migrate:test || echo "No migration script found"
          fi

      - name: 🧪 Run Integration Tests
        run: |
          cd services/${{ matrix.service }}
          npm run test:integration || npm run test -- --testPathPattern=integration
        timeout-minutes: 15

      - name: 📊 Collect Integration Test Results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Integration Tests - ${{ matrix.service }}
          path: services/${{ matrix.service }}/junit.xml
          reporter: jest-junit
          fail-on-error: false

  # =============================================================================
  # END-TO-END TESTS
  # =============================================================================
  test-e2e:
    name: 🧪 E2E Tests
    runs-on: ubuntu-latest
    needs: prepare-test-matrix
    if: inputs.test_type == 'all' || inputs.test_type == 'e2e'
    
    strategy:
      matrix:
        browser: ['chromium', 'firefox', 'webkit']
        shard: [1, 2, 3, 4]
      fail-fast: false
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🚀 Start Test Environment
        run: |
          # Start services with test profile
          docker-compose -f docker-compose.test.yml up -d
          # Wait for services to be ready
          ./scripts/wait-for-services.sh
        timeout-minutes: 5

      - name: 🎭 Install Playwright
        run: |
          if [[ -d "tests/e2e" ]]; then
            npx playwright install --with-deps ${{ matrix.browser }}
          fi

      - name: 🧪 Run E2E Tests
        if: hashFiles('tests/e2e/**') != ''
        run: |
          npx playwright test --project=${{ matrix.browser }} --shard=${{ matrix.shard }}/4
        env:
          BASE_URL: http://localhost:3000
          PLAYWRIGHT_HTML_REPORT: playwright-report-${{ matrix.browser }}-${{ matrix.shard }}

      - name: 📤 Upload E2E Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report-${{ matrix.browser }}-${{ matrix.shard }}
          path: playwright-report-${{ matrix.browser }}-${{ matrix.shard }}/
          retention-days: 7

      - name: 🛑 Stop Test Environment
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  # =============================================================================
  # PERFORMANCE AND LOAD TESTS
  # =============================================================================
  test-performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    if: inputs.test_type == 'all' || inputs.test_type == 'performance'
    
    strategy:
      matrix:
        scenario: ['load', 'stress', 'spike', 'volume']
      fail-fast: false
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🚀 Start Test Environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          ./scripts/wait-for-services.sh

      - name: ⚡ Run Performance Tests
        run: |
          if [[ -f "tests/performance/${{ matrix.scenario }}-test.yml" ]]; then
            npx artillery run tests/performance/${{ matrix.scenario }}-test.yml \
              --output performance-${{ matrix.scenario }}.json
          else
            echo "⏭️ No ${{ matrix.scenario }} tests found"
          fi

      - name: 📊 Generate Performance Report
        if: hashFiles('performance-*.json') != ''
        run: |
          npx artillery report performance-${{ matrix.scenario }}.json \
            --output performance-report-${{ matrix.scenario }}.html

      - name: 📤 Upload Performance Reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports-${{ matrix.scenario }}
          path: performance-report-*.html
          retention-days: 7

      - name: 🛑 Cleanup
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  # =============================================================================
  # SECURITY TESTS
  # =============================================================================
  test-security:
    name: 🔒 Security Tests
    runs-on: ubuntu-latest
    if: inputs.test_type == 'all' || inputs.test_type == 'security'
    
    strategy:
      matrix:
        tool: ['zap', 'nuclei']
      fail-fast: false
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🚀 Start Application
        run: |
          docker-compose -f docker-compose.test.yml up -d api-gateway
          ./scripts/wait-for-services.sh

      - name: 🔍 OWASP ZAP Security Scan
        if: matrix.tool == 'zap'
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: 🔍 Nuclei Security Scan
        if: matrix.tool == 'nuclei'
        uses: projectdiscovery/nuclei-action@main
        with:
          target: http://localhost:3000
          templates: nuclei-templates/

      - name: 🛑 Cleanup
        if: always()
        run: docker-compose -f docker-compose.test.yml down

  # =============================================================================
  # TEST RESULTS AGGREGATION
  # =============================================================================
  test-results:
    name: 📊 Test Results Summary
    runs-on: ubuntu-latest
    needs: [test-node-unit, test-python-unit, test-integration, test-e2e]
    if: always()
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📊 Download All Test Results
        uses: actions/download-artifact@v3

      - name: 📋 Generate Test Summary
        run: |
          echo "# 📊 Test Results Summary" > test-summary.md
          echo "" >> test-summary.md
          echo "| Test Type | Status | Coverage |" >> test-summary.md  
          echo "|-----------|--------|----------|" >> test-summary.md
          
          # Add results for each test type
          echo "| Unit Tests (Node.js) | ${{ needs.test-node-unit.result }} | TBD |" >> test-summary.md
          echo "| Unit Tests (Python) | ${{ needs.test-python-unit.result }} | TBD |" >> test-summary.md
          echo "| Integration Tests | ${{ needs.test-integration.result }} | TBD |" >> test-summary.md
          echo "| E2E Tests | ${{ needs.test-e2e.result }} | TBD |" >> test-summary.md

      - name: 📝 Comment Test Results on PR
        if: github.event_name == 'pull_request'
        uses: mshick/add-pr-comment@v2
        with:
          message-path: test-summary.md

      - name: ❌ Fail on Test Failures
        if: |
          needs.test-node-unit.result == 'failure' ||
          needs.test-python-unit.result == 'failure' ||
          needs.test-integration.result == 'failure' ||
          needs.test-e2e.result == 'failure'
        run: |
          echo "❌ One or more test suites failed"
          exit 1

      - name: ✅ All Tests Passed
        if: |
          needs.test-node-unit.result == 'success' &&
          needs.test-integration.result == 'success' &&
          (needs.test-e2e.result == 'success' || needs.test-e2e.result == 'skipped')
        run: echo "✅ All tests passed successfully"