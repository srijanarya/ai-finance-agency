openapi: 3.0.3
info:
  title: TREUM ALGOTECH API Gateway
  description: Central API gateway for all microservices
  version: 1.0.0
  contact:
    name: TREUM ALGOTECH Team
    email: api@treumalgotech.com
servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.treumalgotech.com
    description: Production server

paths:
  /health:
    get:
      summary: Health check endpoint
      tags:
        - System
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /auth/register:
    post:
      summary: Register new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /auth/login:
    post:
      summary: User login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users/profile:
    get:
      summary: Get user profile
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /trading/orders:
    post:
      summary: Create trading order
      tags:
        - Trading
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'

  /signals/latest:
    get:
      summary: Get latest trading signals
      tags:
        - Signals
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of signals to return
      responses:
        '200':
          description: Signals retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Signal'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /market-data/realtime:
    get:
      summary: WebSocket connection for real-time market data
      tags:
        - Market Data
      security:
        - bearerAuth: []
      responses:
        '101':
          description: WebSocket connection established
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
        services:
          type: object
          additionalProperties:
            type: string

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: integer
        user:
          $ref: '#/components/schemas/UserProfile'

    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        kycStatus:
          type: string
          enum: [pending, verified, rejected]
        createdAt:
          type: string
          format: date-time

    OrderRequest:
      type: object
      required:
        - symbol
        - side
        - quantity
        - orderType
      properties:
        symbol:
          type: string
        side:
          type: string
          enum: [buy, sell]
        quantity:
          type: number
        orderType:
          type: string
          enum: [market, limit, stop, stop_limit]
        price:
          type: number
        stopPrice:
          type: number

    OrderResponse:
      type: object
      properties:
        orderId:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, filled, partial, cancelled, rejected]
        symbol:
          type: string
        side:
          type: string
        quantity:
          type: number
        filledQuantity:
          type: number
        price:
          type: number
        createdAt:
          type: string
          format: date-time

    Signal:
      type: object
      properties:
        id:
          type: string
          format: uuid
        symbol:
          type: string
        action:
          type: string
          enum: [buy, sell, hold]
        confidence:
          type: number
          minimum: 0
          maximum: 100
        entryPrice:
          type: number
        stopLoss:
          type: number
        takeProfit:
          type: number
        timeframe:
          type: string
        analysis:
          type: string
        createdAt:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        statusCode:
          type: integer
        timestamp:
          type: string
          format: date-time

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'