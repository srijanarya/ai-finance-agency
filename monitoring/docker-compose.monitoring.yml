# AI Finance Agency - Comprehensive Monitoring Stack
# Production-ready monitoring with Prometheus, Grafana, and supporting services

version: '3.8'

services:
  # =======================================================================
  # CORE MONITORING SERVICES
  # =======================================================================

  # Prometheus - Metrics collection and storage
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: ai_finance_prometheus_monitoring
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--storage.tsdb.wal-compression'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.enable-remote-write-receiver'
      - '--web.external-url=http://localhost:9090'
      - '--log.level=info'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alert.rules.yml:/etc/prometheus/rules/alert.rules.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring
      - ai_finance_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Grafana - Metrics visualization and dashboards
  grafana:
    image: grafana/grafana:10.1.0
    container_name: ai_finance_grafana_monitoring
    restart: unless-stopped
    environment:
      # Security settings
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin123}
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY:-your-secret-key}
      GF_SECURITY_ALLOW_EMBEDDING: true
      GF_SECURITY_COOKIE_SAMESITE: none
      
      # Feature toggles
      GF_FEATURE_TOGGLES_ENABLE: publicDashboards,correlations
      
      # Plugins
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel,grafana-worldmap-panel
      
      # Server settings
      GF_SERVER_ROOT_URL: http://localhost:3001
      GF_SERVER_SERVE_FROM_SUB_PATH: false
      
      # Database (using SQLite for simplicity, PostgreSQL recommended for production)
      GF_DATABASE_TYPE: sqlite3
      GF_DATABASE_PATH: /var/lib/grafana/grafana.db
      
      # Logging
      GF_LOG_LEVEL: info
      GF_LOG_MODE: console,file
      
      # Alerting
      GF_ALERTING_ENABLED: true
      GF_UNIFIED_ALERTING_ENABLED: true
      
      # SMTP (configure for email alerts)
      # GF_SMTP_ENABLED: true
      # GF_SMTP_HOST: ${SMTP_HOST}
      # GF_SMTP_USER: ${SMTP_USER}
      # GF_SMTP_PASSWORD: ${SMTP_PASSWORD}
      # GF_SMTP_FROM_ADDRESS: ${SMTP_FROM_ADDRESS}
      
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - monitoring
      - ai_finance_network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # AlertManager - Alert routing and management
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: ai_finance_alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--web.route-prefix=/'
      - '--log.level=info'
    ports:
      - "${ALERTMANAGER_PORT:-9093}:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # =======================================================================
  # EXPORTERS - Infrastructure monitoring
  # =======================================================================

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: ai_finance_node_exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.netdev.device-exclude=^veth.*$$'
      - '--collector.processes'
      - '--collector.systemd'
      - '--collector.tcpstat'
    ports:
      - "${NODE_EXPORTER_PORT:-9100}:9100"
    volumes:
      - '/proc:/host/proc:ro'
      - '/sys:/host/sys:ro'
      - '/:/rootfs:ro'
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: ai_finance_cadvisor
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "${CADVISOR_PORT:-8080}:8080"
    networks:
      - monitoring
    command:
      - '--housekeeping_interval=30s'
      - '--max_housekeeping_interval=35s'
      - '--event_storage_event_limit=default=0'
      - '--event_storage_age_limit=default=0'
      - '--disable_metrics=percpu,sched,tcp,udp,disk,diskIO,accelerator,hugetlb,memory_numa,advtcp,resctrl'
      - '--docker_only'
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.1'

  # PostgreSQL Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.13.2
    container_name: ai_finance_postgres_exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-ai_finance_user}:${POSTGRES_PASSWORD:-securepassword123}@postgres:5432/${POSTGRES_DB:-ai_finance_db}?sslmode=disable"
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres_exporter/queries.yaml"
    ports:
      - "${POSTGRES_EXPORTER_PORT:-9187}:9187"
    volumes:
      - ./exporters/postgres/queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    networks:
      - monitoring
      - ai_finance_network
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:v1.52.0
    container_name: ai_finance_redis_exporter
    restart: unless-stopped
    environment:
      REDIS_ADDR: "redis://redis:6379"
      REDIS_PASSWORD: "${REDIS_PASSWORD:-}"
    ports:
      - "${REDIS_EXPORTER_PORT:-9121}:9121"
    networks:
      - monitoring
      - ai_finance_network
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'
        reservations:
          memory: 32M
          cpus: '0.05'

  # MongoDB Exporter
  mongodb-exporter:
    image: percona/mongodb_exporter:0.39.0
    container_name: ai_finance_mongodb_exporter
    restart: unless-stopped
    environment:
      MONGODB_URI: "mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-securepass123}@mongodb:27017"
    ports:
      - "${MONGODB_EXPORTER_PORT:-9216}:9216"
    networks:
      - monitoring
      - ai_finance_network
    depends_on:
      - mongodb
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'

  # Nginx Exporter
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:0.11.0
    container_name: ai_finance_nginx_exporter
    restart: unless-stopped
    command:
      - '-nginx.scrape-uri=http://nginx:8080/nginx_status'
    ports:
      - "${NGINX_EXPORTER_PORT:-9113}:9113"
    networks:
      - monitoring
      - ai_finance_network
    depends_on:
      - nginx
    deploy:
      resources:
        limits:
          memory: 32M
          cpus: '0.05'
        reservations:
          memory: 16M
          cpus: '0.025'

  # =======================================================================
  # SUPPORTING SERVICES
  # =======================================================================

  # Jaeger - Distributed tracing (already in main compose, but can be enabled here too)
  jaeger:
    image: jaegertracing/all-in-one:1.48
    container_name: ai_finance_jaeger_monitoring
    restart: unless-stopped
    environment:
      COLLECTOR_OTLP_ENABLED: true
      COLLECTOR_ZIPKIN_HOST_PORT: :9411
      METRICS_STORAGE_TYPE: prometheus
      PROMETHEUS_SERVER_URL: http://prometheus:9090
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"
      - "${JAEGER_COLLECTOR_HTTP_PORT:-14268}:14268"
      - "${JAEGER_COLLECTOR_GRPC_PORT:-14250}:14250"
      - "${JAEGER_OTLP_GRPC_PORT:-14250}:14250"
      - "${JAEGER_OTLP_HTTP_PORT:-14269}:14269"
    networks:
      - monitoring
      - ai_finance_network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

# =======================================================================
# VOLUMES
# =======================================================================
volumes:
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana
  alertmanager_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/alertmanager

# =======================================================================
# NETWORKS
# =======================================================================
networks:
  monitoring:
    name: ai_finance_monitoring
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1
  
  # Connect to main application network
  ai_finance_network:
    external: true
    name: ai_finance_network