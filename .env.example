# AI Finance Agency - Environment Configuration Template
# Copy this file to .env and fill in your actual values
# NEVER commit the .env file to version control

# ==================== AI SERVICES ====================
# Claude API (Anthropic) - For financial analysis and compliance
CLAUDE_API_KEY=sk-ant-api03-...

# OpenAI - For content generation and creative tasks
OPENAI_API_KEY=sk-...

# Perplexity - For web search and research
PERPLEXITY_API_KEY=pplx-...

# Google AI - For additional AI capabilities
GOOGLE_AI_KEY=...

# ==================== DATABASE CONFIGURATION ====================
# PostgreSQL - Primary database
POSTGRES_DB=ai_finance_db
POSTGRES_USER=ai_finance_user
POSTGRES_PASSWORD=securepassword123
POSTGRES_PORT=5432

# Redis - Cache and session storage
REDIS_URL=redis://localhost:6379
REDIS_PASSWORD=
REDIS_PORT=6379
REDIS_MAX_MEMORY=256mb

# MongoDB - Document storage
MONGO_ROOT_USERNAME=admin
MONGO_ROOT_PASSWORD=securepass123
MONGO_DATABASE=ai_finance
MONGO_PORT=27017

# RabbitMQ - Message broker
RABBITMQ_USER=ai_finance_admin
RABBITMQ_PASSWORD=securerabbitpass
RABBITMQ_VHOST=ai_finance
RABBITMQ_PORT=5672
RABBITMQ_MANAGEMENT_PORT=15672

# Legacy Database Support
SUPABASE_URL=https://xxxxx.supabase.co
SUPABASE_KEY=eyJhbGciOiJIUzI1NiIs...
DATABASE_PATH=data/agency.db

# ==================== SOCIAL MEDIA APIS ====================
# LinkedIn Personal Account
LINKEDIN_PERSONAL_CLIENT_ID=
LINKEDIN_PERSONAL_CLIENT_SECRET=
LINKEDIN_PERSONAL_ACCESS_TOKEN=
LINKEDIN_PERSONAL_REFRESH_TOKEN=

# LinkedIn Company Account
LINKEDIN_COMPANY_CLIENT_ID=
LINKEDIN_COMPANY_CLIENT_SECRET=
LINKEDIN_COMPANY_ACCESS_TOKEN=

# LinkedIn Shared Settings
LINKEDIN_REDIRECT_URI=http://localhost:8080/callback
LINKEDIN_EMAIL=
LINKEDIN_PASSWORD=

# Twitter/X API
TWITTER_CONSUMER_KEY=
TWITTER_CONSUMER_SECRET=
TWITTER_ACCESS_TOKEN=
TWITTER_ACCESS_TOKEN_SECRET=
TWITTER_BEARER_TOKEN=

# Telegram Bot
TELEGRAM_BOT_TOKEN=
TELEGRAM_CHANNEL_ID=@YourChannelName
TELEGRAM_API_ID=
TELEGRAM_API_HASH=

# Instagram (via Meta Graph API)
INSTAGRAM_ACCESS_TOKEN=
INSTAGRAM_BUSINESS_ACCOUNT_ID=

# ==================== MARKET DATA APIS ====================
# Alpha Vantage - Stock market data
ALPHA_VANTAGE_API_KEY=

# Yahoo Finance (no key required, but rate limited)
YAHOO_FINANCE_ENABLED=true

# NSE India API
NSE_API_KEY=
NSE_API_SECRET=

# Finnhub - Financial data
FINNHUB_API_KEY=

# Polygon.io - Market data
POLYGON_API_KEY=

# Market Data Service Configuration
WEBSOCKET_ENABLED=true
AI_SERVICE_URL=http://content-intelligence:3009

# ==================== EXTERNAL SERVICES ====================
# Payment Processing
STRIPE_SECRET_KEY=
STRIPE_WEBHOOK_SECRET=
PAYPAL_CLIENT_ID=
PAYPAL_CLIENT_SECRET=

# Buffer - Social media scheduling
BUFFER_ACCESS_TOKEN=
BUFFER_CLIENT_ID=
BUFFER_CLIENT_SECRET=

# SendGrid - Email service
SENDGRID_API_KEY=
SENDGRID_FROM_EMAIL=

# Twilio - SMS notifications
TWILIO_ACCOUNT_SID=
TWILIO_AUTH_TOKEN=
TWILIO_PHONE_NUMBER=

# Slack - Notifications
SLACK_WEBHOOK_URL=
SLACK_BOT_TOKEN=

# ==================== WORKFLOW AUTOMATION ====================
# n8n Configuration
N8N_WEBHOOK_URL=http://localhost:5678/webhook/
N8N_API_KEY=
N8N_BASIC_AUTH_USER=
N8N_BASIC_AUTH_PASSWORD=

# ==================== MONITORING & OBSERVABILITY ====================
# Prometheus - Metrics collection
PROMETHEUS_PORT=9090

# Grafana - Dashboards and visualization
GRAFANA_PORT=3001
GRAFANA_USER=admin
GRAFANA_PASSWORD=admin123

# Jaeger - Distributed tracing
JAEGER_UI_PORT=16686
JAEGER_COLLECTOR_PORT=14268
JAEGER_OTLP_GRPC_PORT=14250
JAEGER_OTLP_HTTP_PORT=14269

# ELK Stack - Centralized logging
ELASTICSEARCH_PORT=9200
KIBANA_PORT=5601
LOGSTASH_PORT=5044

# Google Analytics
GA_MEASUREMENT_ID=
GA_API_SECRET=

# Mixpanel
MIXPANEL_TOKEN=
MIXPANEL_API_SECRET=

# Sentry - Error tracking
SENTRY_DSN=

# ==================== APPLICATION SETTINGS ====================
# Environment
NODE_ENV=development
APP_ENV=development
DEBUG=true
LOG_LEVEL=info

# Docker & Build Configuration
NODE_VERSION=20-alpine
BUILD_DATE=
VCS_REF=
VERSION=latest

# Microservices Ports
API_GATEWAY_PORT=3000
PAYMENT_PORT=3001
USER_MANAGEMENT_PORT=3002
SIGNALS_PORT=3003
TRADING_PORT=3004
EDUCATION_PORT=3005
NOTIFICATION_PORT=3006
RISK_MANAGEMENT_PORT=3007
MARKET_DATA_PORT=3008
CONTENT_INTELLIGENCE_PORT=3009

# Infrastructure Ports
CONSUL_PORT=8500
CONSUL_DNS_PORT=8600
NGINX_HTTP_PORT=80
NGINX_HTTPS_PORT=443

# Legacy Ports (for backward compatibility)
APP_PORT=3000
API_PORT=8000
DASHBOARD_PORT=3001

# Security
JWT_SECRET=your-secret-key-min-32-chars-change-in-production
SESSION_SECRET=your-session-secret-change-in-production
ENCRYPTION_KEY=your-encryption-key-change-in-production

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# Worker Configuration
WORKER_CONCURRENCY=2

# Content Generation Settings
CONTENT_PER_DAY=15
LEADS_PER_DAY=50
OUTREACH_PER_DAY=30
MAX_TOKENS_PER_REQUEST=1000
DEFAULT_TEMPERATURE=0.7

# ==================== FEATURE FLAGS ====================
ENABLE_AI_GENERATION=true
ENABLE_AUTO_POSTING=false
ENABLE_COMPLIANCE_CHECK=true
ENABLE_MARKET_DATA=true
ENABLE_ANALYTICS=true
ENABLE_ERROR_REPORTING=true
AI_RISK_ANALYSIS_ENABLED=true

# ==================== COMPLIANCE & LEGAL ====================
# Compliance levels: strict, moderate, relaxed
COMPLIANCE_LEVEL=strict
ENABLE_FINRA_CHECK=true
ENABLE_SEC_CHECK=true
ENABLE_MIFID_CHECK=false

# ==================== BACKUP & RECOVERY ====================
BACKUP_ENABLED=true
BACKUP_FREQUENCY=hourly
BACKUP_RETENTION_DAYS=30
BACKUP_S3_BUCKET=
BACKUP_S3_REGION=us-east-1

# ==================== WEBHOOK ENDPOINTS ====================
# Incoming webhooks
WEBHOOK_SECRET=your-webhook-secret
MARKET_EVENT_WEBHOOK=/webhooks/market
CLIENT_REQUEST_WEBHOOK=/webhooks/client
SOCIAL_MENTION_WEBHOOK=/webhooks/social

# ==================== DEVELOPMENT & TESTING ====================
# Test API Keys (use these for testing only)
TEST_MODE=false
USE_MOCK_AI=false
USE_MOCK_MARKET_DATA=false
LOG_FILE_PATH=logs/app.log

# Docker Compose Profiles
# Available profiles: infrastructure, microservices, monitoring, logging, production, development
# Usage: docker-compose --profile development --profile microservices up
COMPOSE_PROFILES=development,microservices,infrastructure

# ==================== DOCKER COMPOSE USAGE ====================
# Quick start commands:
# 
# Development with core services:
# docker-compose --profile development --profile infrastructure up -d
# 
# Full microservices stack:
# docker-compose --profile development --profile microservices --profile infrastructure up -d
# 
# Production with monitoring:
# docker-compose --profile production --profile monitoring up -d
# 
# Infrastructure only:
# docker-compose --profile infrastructure up -d
# 
# With logging (ELK stack):
# docker-compose --profile production --profile logging up -d

# ==================== NOTES ====================
# 1. All API keys should be obtained from their respective services
# 2. Never share or commit actual API keys
# 3. Use strong, unique values for secrets
# 4. Rotate keys regularly for security
# 5. Set appropriate rate limits based on your API tier
# 6. Enable only the features you need to reduce attack surface
# 7. Create ./data directories before first run for persistent volumes
# 8. Use profiles to control which services are started
# 9. Health checks ensure dependencies are ready before service starts
# 10. Resource limits prevent any single service from consuming too much memory/CPU