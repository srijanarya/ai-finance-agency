# Docker Compose Production Configuration
# Use this for production deployments with optimized settings

version: '3.8'

services:
  # Production optimizations for all services
  api-gateway:
    build:
      target: runtime
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.75'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
    environment:
      NODE_ENV: production
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    
  user-management:
    build:
      target: runtime
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 384M
          cpus: '0.5'
    environment:
      NODE_ENV: production
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        
  trading:
    build:
      target: runtime
    restart: always
    deploy:
      replicas: 3  # Critical service - more replicas
      resources:
        limits:
          memory: 768M
          cpus: '1.0'
    environment:
      NODE_ENV: production
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        
  signals:
    build:
      target: runtime
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.75'
    environment:
      NODE_ENV: production
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        
  payment:
    build:
      target: runtime
    restart: always
    deploy:
      replicas: 2  # Critical service
      resources:
        limits:
          memory: 512M
          cpus: '0.75'
    environment:
      NODE_ENV: production
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        
  education:
    build:
      target: runtime
    restart: always
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 384M
          cpus: '0.5'
    environment:
      NODE_ENV: production
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        
  market-data:
    build:
      target: runtime
    restart: always
    deploy:
      replicas: 2  # High-traffic service
      resources:
        limits:
          memory: 768M
          cpus: '1.0'
    environment:
      NODE_ENV: production
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        
  risk-management:
    build:
      target: runtime
    restart: always
    deploy:
      replicas: 2  # Critical service
      resources:
        limits:
          memory: 768M
          cpus: '1.0'
    environment:
      NODE_ENV: production
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        
  notification:
    build:
      target: runtime
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 384M
          cpus: '0.5'
    environment:
      NODE_ENV: production
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        
  content-intelligence:
    build:
      target: runtime
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 768M  # AI service needs more memory
          cpus: '1.0'
    environment:
      NODE_ENV: production
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Production infrastructure scaling
  postgres:
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    environment:
      POSTGRES_SHARED_PRELOAD_LIBRARIES: pg_stat_statements
      POSTGRES_MAX_CONNECTIONS: 200
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
        
  redis:
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    command: >
      redis-server 
      --maxmemory 768mb 
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --tcp-keepalive 60
      --timeout 300
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"
        
  rabbitmq:
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.75'
    environment:
      RABBITMQ_VM_MEMORY_HIGH_WATERMARK: 0.8
      RABBITMQ_DISK_FREE_LIMIT: 2GB
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"

  # Nginx with SSL termination for production
  nginx:
    volumes:
      - ./infrastructure/nginx/ssl:/etc/ssl/certs:ro
      - ./infrastructure/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

# Production-specific external networks
networks:
  ai_finance_network:
    external: true
  traefik_default:
    external: true