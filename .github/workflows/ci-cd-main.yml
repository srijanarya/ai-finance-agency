name: 🚀 Main CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment (skip some checks)'
        required: false
        default: false
        type: boolean
      services:
        description: 'Services to deploy (comma-separated, empty for all)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository }}
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # =============================================================================
  # PREPARATION AND VALIDATION
  # =============================================================================
  prepare:
    name: 🔍 Prepare Pipeline
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft != true
    outputs:
      should_deploy: ${{ steps.changes.outputs.should_deploy }}
      affected_services: ${{ steps.changes.outputs.affected_services }}
      version: ${{ steps.version.outputs.version }}
      short_sha: ${{ steps.version.outputs.short_sha }}
      environment: ${{ steps.environment.outputs.environment }}
      is_main_branch: ${{ steps.environment.outputs.is_main_branch }}
      is_pr: ${{ steps.environment.outputs.is_pr }}
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 Detect Changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            services:
              - 'services/**'
              - 'packages/**'
              - 'apps/**'
              - 'infrastructure/**'
              - 'docker-compose*.yml'
              - 'Dockerfile*'
              - 'package*.json'
              - 'turbo.json'
            config:
              - '.github/**'
              - 'scripts/**'
              - '*.json'
              - '*.js'
              - '*.ts'
            should_deploy:
              - 'services/**'
              - 'apps/**'
              - 'infrastructure/**'
              - 'docker-compose*.yml'
              - 'Dockerfile*'

      - name: 🏷️ Generate Version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            VERSION="pr-${{ github.event.number }}-$(git rev-parse --short HEAD)"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            VERSION="$(date +%Y%m%d)-$(git rev-parse --short HEAD)"
          else
            VERSION="$(git rev-parse --abbrev-ref HEAD)-$(git rev-parse --short HEAD)"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "🏷️ Generated version: ${VERSION}"

      - name: 🎯 Determine Environment
        id: environment
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT="${{ inputs.environment }}"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            ENVIRONMENT="review"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENVIRONMENT="production"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            ENVIRONMENT="staging"
          else
            ENVIRONMENT="development"
          fi
          
          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "is_main_branch=${{ github.ref == 'refs/heads/main' }}" >> $GITHUB_OUTPUT
          echo "is_pr=${{ github.event_name == 'pull_request' }}" >> $GITHUB_OUTPUT
          echo "🎯 Target environment: ${ENVIRONMENT}"

      - name: 🔧 Affected Services Detection
        id: services
        run: |
          SERVICES=$(find services -name "package.json" -exec dirname {} \; | sed 's|services/||' | sort | tr '\n' ',' | sed 's/,$//')
          if [[ "${{ inputs.services }}" != "" ]]; then
            SERVICES="${{ inputs.services }}"
          fi
          echo "affected_services=${SERVICES}" >> $GITHUB_OUTPUT
          echo "🔧 Detected services: ${SERVICES}"

  # =============================================================================
  # PARALLEL QUALITY CHECKS
  # =============================================================================
  code-quality:
    name: 🔍 Code Quality
    needs: prepare
    uses: ./.github/workflows/code-quality.yml
    secrets: inherit

  test-suite:
    name: 🧪 Test Suite
    needs: prepare
    uses: ./.github/workflows/test.yml
    with:
      services: ${{ needs.prepare.outputs.affected_services }}
    secrets: inherit

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.should_deploy == 'true'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔐 Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

  # =============================================================================
  # BUILD AND CONTAINERIZATION
  # =============================================================================
  build-images:
    name: 🏗️ Build Images
    runs-on: ubuntu-latest
    needs: [prepare, code-quality]
    if: needs.prepare.outputs.should_deploy == 'true'
    strategy:
      matrix:
        service: [
          'api-gateway',
          'user-management', 
          'payment',
          'signals',
          'trading',
          'education',
          'market-data',
          'risk-management',
          'notification',
          'content-intelligence'
        ]
      fail-fast: false
      
    outputs:
      image-digest-${{ matrix.service }}: ${{ steps.build.outputs.digest }}
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0
            network=host

      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract Image Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=${{ needs.prepare.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: 🏗️ Build and Push Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: services/${{ matrix.service }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ needs.prepare.outputs.version }}
          target: runtime

      - name: 🔍 Test Image Security
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:${{ needs.prepare.outputs.version }}
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  # =============================================================================
  # DEPLOYMENT ORCHESTRATION
  # =============================================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    needs: [prepare, test-suite, build-images]
    if: |
      needs.prepare.outputs.should_deploy == 'true' && 
      (needs.prepare.outputs.environment == 'staging' || 
       needs.prepare.outputs.environment == 'review' ||
       github.ref == 'refs/heads/develop')
    uses: ./.github/workflows/deploy-staging.yml
    with:
      version: ${{ needs.prepare.outputs.version }}
      services: ${{ needs.prepare.outputs.affected_services }}
      environment: ${{ needs.prepare.outputs.environment }}
    secrets: inherit

  deploy-production:
    name: 🚀 Deploy to Production  
    needs: [prepare, test-suite, build-images, deploy-staging]
    if: |
      needs.prepare.outputs.should_deploy == 'true' && 
      (needs.prepare.outputs.is_main_branch == 'true' ||
       needs.prepare.outputs.environment == 'production')
    uses: ./.github/workflows/deploy-production.yml
    with:
      version: ${{ needs.prepare.outputs.version }}
      services: ${{ needs.prepare.outputs.affected_services }}
      requires_approval: ${{ needs.prepare.outputs.is_main_branch == 'true' }}
    secrets: inherit

  # =============================================================================
  # POST-DEPLOYMENT VALIDATION  
  # =============================================================================
  smoke-tests:
    name: 🧪 Smoke Tests
    runs-on: ubuntu-latest
    needs: [prepare, deploy-staging]
    if: needs.deploy-staging.result == 'success'
    
    strategy:
      matrix:
        endpoint:
          - { name: "Health Check", path: "/health", expected: "200" }
          - { name: "API Status", path: "/api/v1/status", expected: "200" }
          - { name: "Metrics", path: "/metrics", expected: "200" }
      fail-fast: false
      
    steps:
      - name: 🔍 Test ${{ matrix.endpoint.name }}
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            ${{ secrets.STAGING_BASE_URL }}${{ matrix.endpoint.path }})
          if [[ "$RESPONSE" != "${{ matrix.endpoint.expected }}" ]]; then
            echo "❌ ${{ matrix.endpoint.name }} failed: expected ${{ matrix.endpoint.expected }}, got $RESPONSE"
            exit 1
          fi
          echo "✅ ${{ matrix.endpoint.name }} passed"

  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [prepare, deploy-staging]
    if: needs.deploy-staging.result == 'success'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⚡ Run Load Tests
        run: |
          if [[ -f "tests/performance/api-load-test.yml" ]]; then
            npx artillery run tests/performance/api-load-test.yml \
              --target ${{ secrets.STAGING_BASE_URL }}
          else
            echo "⏭️ No performance tests found, skipping"
          fi

  # =============================================================================
  # NOTIFICATIONS AND CLEANUP
  # =============================================================================
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [prepare, deploy-staging, deploy-production, smoke-tests]
    if: always()
    
    steps:
      - name: 📢 Slack Notification - Success
        if: |
          needs.deploy-staging.result == 'success' || 
          needs.deploy-production.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          title: "🚀 Deployment Successful"
          message: |
            *Environment:* ${{ needs.prepare.outputs.environment }}
            *Version:* ${{ needs.prepare.outputs.version }}
            *Services:* ${{ needs.prepare.outputs.affected_services }}
            *Branch:* ${{ github.ref_name }}
            *Commit:* ${{ github.event.head_commit.message }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📢 Slack Notification - Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          title: "❌ Deployment Failed"
          message: |
            *Environment:* ${{ needs.prepare.outputs.environment }}
            *Version:* ${{ needs.prepare.outputs.version }}
            *Branch:* ${{ github.ref_name }}
            *Failed Job:* ${{ github.job }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [prepare, deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: 🧹 Cleanup Docker Images
        if: needs.prepare.outputs.environment == 'review'
        run: |
          echo "🧹 Cleaning up review environment images"
          # Add cleanup logic for review environments
          
      - name: 📊 Update Deployment Status
        if: always()
        run: |
          echo "📊 Pipeline completed"
          echo "Environment: ${{ needs.prepare.outputs.environment }}"
          echo "Version: ${{ needs.prepare.outputs.version }}"
          echo "Status: ${{ job.status }}"