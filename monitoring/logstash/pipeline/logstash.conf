# Logstash Pipeline Configuration
# AI Finance Agency log processing and enrichment

input {
  # Beats input for Filebeat
  beats {
    port => 5044
  }

  # Direct TCP input for applications
  tcp {
    port => 5000
    codec => json_lines
  }

  # HTTP input for webhooks
  http {
    port => 8080
    codec => json
  }
}

filter {
  # Parse container logs from Filebeat
  if [agent][type] == "filebeat" {
    # Extract container information
    if [container][name] {
      mutate {
        add_field => { "service_name" => "%{[container][name]}" }
      }
      
      # Remove container ID prefix
      mutate {
        gsub => [
          "service_name", "^ai_finance_", "",
          "service_name", "_[a-f0-9]{12}$", ""
        ]
      }
    }

    # Parse JSON logs
    if [message] =~ /^\{.*\}$/ {
      json {
        source => "message"
        target => "parsed"
      }
    }
  }

  # Service-specific parsing
  if [service_name] {
    case [service_name] {
      "api-gateway" {
        # Parse API Gateway logs
        if [parsed][type] == "request" {
          mutate {
            add_field => { 
              "log_type" => "http_request"
              "request_id" => "%{[parsed][requestId]}"
              "method" => "%{[parsed][method]}"
              "url" => "%{[parsed][url]}"
              "ip" => "%{[parsed][ip]}"
            }
          }
        }
        
        if [parsed][type] == "response" {
          mutate {
            add_field => { 
              "log_type" => "http_response"
              "request_id" => "%{[parsed][requestId]}"
              "status_code" => "%{[parsed][statusCode]}"
              "duration" => "%{[parsed][duration]}"
            }
          }
        }
        
        if [parsed][type] == "error" {
          mutate {
            add_field => { 
              "log_type" => "application_error"
              "error_message" => "%{[parsed][message]}"
              "stack_trace" => "%{[parsed][stack]}"
            }
          }
        }
      }
      
      "payment" {
        # Parse Payment service logs
        if [parsed][type] == "transaction" {
          mutate {
            add_field => { 
              "log_type" => "payment_transaction"
              "transaction_id" => "%{[parsed][transactionId]}"
              "amount" => "%{[parsed][amount]}"
              "currency" => "%{[parsed][currency]}"
              "status" => "%{[parsed][status]}"
              "provider" => "%{[parsed][provider]}"
            }
          }
        }
        
        # Revenue tracking
        if [parsed][amount] and [parsed][status] == "completed" {
          mutate {
            add_field => { "revenue_event" => "true" }
            convert => { "[parsed][amount]" => "float" }
          }
        }
      }
      
      "trading" {
        # Parse Trading service logs
        if [parsed][type] == "trade" {
          mutate {
            add_field => { 
              "log_type" => "trade_execution"
              "trade_id" => "%{[parsed][tradeId]}"
              "symbol" => "%{[parsed][symbol]}"
              "volume" => "%{[parsed][volume]}"
              "price" => "%{[parsed][price]}"
              "side" => "%{[parsed][side]}"
              "status" => "%{[parsed][status]}"
            }
          }
        }
      }
      
      "signals" {
        # Parse Signals service logs
        if [parsed][type] == "signal" {
          mutate {
            add_field => { 
              "log_type" => "trading_signal"
              "signal_id" => "%{[parsed][signalId]}"
              "symbol" => "%{[parsed][symbol]}"
              "signal_type" => "%{[parsed][signalType]}"
              "confidence" => "%{[parsed][confidence]}"
              "accuracy" => "%{[parsed][accuracy]}"
            }
          }
        }
      }
      
      "user-management" {
        # Parse User Management logs
        if [parsed][category] == "security" {
          mutate {
            add_field => { 
              "log_type" => "security_event"
              "security_type" => "%{[parsed][type]}"
              "user_id" => "%{[parsed][userId]}"
              "ip_address" => "%{[parsed][ip]}"
            }
          }
        }
        
        if [parsed][category] == "rate_limit" {
          mutate {
            add_field => { 
              "log_type" => "rate_limit_exceeded"
              "limit_key" => "%{[parsed][key]}"
              "limit_value" => "%{[parsed][limit]}"
            }
          }
        }
      }
    }
  }

  # Add timestamp parsing
  if [parsed][@timestamp] {
    date {
      match => [ "[parsed][@timestamp]", "ISO8601" ]
    }
  }

  # Add environment information
  mutate {
    add_field => { 
      "environment" => "${ENVIRONMENT:development}"
      "cluster" => "ai-finance"
      "version" => "${VERSION:1.0.0}"
    }
  }

  # Geo IP enrichment for security events
  if [ip_address] {
    geoip {
      source => "ip_address"
      target => "geoip"
    }
  }

  # Clean up fields
  mutate {
    remove_field => [ "agent", "ecs", "host", "input" ]
  }
}

output {
  # Main Elasticsearch output
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "ai-finance-logs-%{+YYYY.MM.dd}"
    template_name => "ai-finance-logs"
    template_pattern => "ai-finance-logs-*"
    template => {
      "settings" => {
        "number_of_shards" => 1
        "number_of_replicas" => 0
        "index.refresh_interval" => "5s"
      }
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" }
          "service_name" => { "type" => "keyword" }
          "log_type" => { "type" => "keyword" }
          "level" => { "type" => "keyword" }
          "message" => { "type" => "text" }
          "request_id" => { "type" => "keyword" }
          "user_id" => { "type" => "keyword" }
          "ip_address" => { "type" => "ip" }
          "status_code" => { "type" => "integer" }
          "duration" => { "type" => "float" }
          "amount" => { "type" => "float" }
          "currency" => { "type" => "keyword" }
          "environment" => { "type" => "keyword" }
        }
      }
    }
  }

  # Error logs to separate index
  if [level] == "error" or [log_type] == "application_error" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "ai-finance-errors-%{+YYYY.MM.dd}"
    }
  }

  # Security events to separate index
  if [log_type] == "security_event" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "ai-finance-security-%{+YYYY.MM.dd}"
    }
  }

  # Revenue events for business analytics
  if [revenue_event] == "true" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "ai-finance-revenue-%{+YYYY.MM.dd}"
    }
  }

  # Trading events for trading analytics
  if [log_type] == "trade_execution" or [log_type] == "trading_signal" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "ai-finance-trading-%{+YYYY.MM.dd}"
    }
  }

  # Debug output (remove in production)
  if "${LOG_DEBUG:false}" == "true" {
    stdout {
      codec => rubydebug
    }
  }
}